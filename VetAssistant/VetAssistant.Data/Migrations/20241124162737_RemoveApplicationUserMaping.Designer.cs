// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetAssistant.Data;

#nullable disable

namespace VetAssistant.Data.Migrations
{
    [DbContext(typeof(VetAssistantDbContext))]
    [Migration("20241124162737_RemoveApplicationUserMaping")]
    partial class RemoveApplicationUserMaping
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingInterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicAddress");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicEmail");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("ClinicSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("ClinicName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ClinicPhone");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicTown");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicWorkingTime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("CountryISOCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2617d12-e265-48c2-a02d-1e755a687a73"),
                            Code = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = new Guid("0da0e458-d73c-41d4-8def-bcaee17195ac"),
                            Code = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = new Guid("17b1290f-697e-4a8b-a15f-e85005203a74"),
                            Code = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = new Guid("f83cc573-c48f-4569-a2c4-e2ca4f562a95"),
                            Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = new Guid("130243c4-86f5-4d29-ab84-bb852997b009"),
                            Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = new Guid("b386a4d1-129b-4358-8dd8-bdd943696472"),
                            Code = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = new Guid("613d0a1c-f2c4-46c0-9c14-240a13d57dd5"),
                            Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("382cd2da-97ab-4083-91be-e3ade5aa9732"),
                            Code = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("29f23f10-d2e2-4ddc-a60c-673a897857f4"),
                            Code = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("0bcca64b-7a54-498a-ae30-47a104c2ac81"),
                            Code = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("3e8394a1-fc82-44e2-bee6-752e494abf90"),
                            Code = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = new Guid("99078d34-02ad-4e0c-93ce-2a590b5de2dd"),
                            Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = new Guid("e53f1560-de15-44c1-b1bc-e903e125de2b"),
                            Code = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = new Guid("f3426e5b-73ba-403d-b5ee-99f361febf20"),
                            Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = new Guid("cc1aadfb-738f-4596-9289-53830ed3b3b2"),
                            Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = new Guid("89f94de4-c82e-406b-91fb-9ea6f743ddbf"),
                            Code = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("c2b39bb7-be43-40d4-b726-ed5d3a62baec"),
                            Code = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("ae2cdaec-984b-40b0-a443-acd33b875d0f"),
                            Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = new Guid("7e088bfc-4325-4e5f-a0ae-61241c6e44e1"),
                            Code = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = new Guid("55c52885-7eac-4810-b6c4-86bcce6311d5"),
                            Code = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = new Guid("ec0f5148-4a05-4eb9-9e3c-de2182b684ad"),
                            Code = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = new Guid("5f165159-9e54-4d64-9e35-485a6825634e"),
                            Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("39ea63b4-d0da-4924-80ca-ac7ea2da6555"),
                            Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = new Guid("83c00915-549c-4d3e-acf3-6ed5d9abea92"),
                            Code = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("251103fb-84ad-41f5-949f-a8cf5cc6bed3"),
                            Code = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = new Guid("1009f8cf-439a-4ec6-b088-ec1fdc133776"),
                            Code = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("292aadf6-0c9a-4e2e-8fec-77ff3a237de1"),
                            Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = new Guid("2bad3be8-c51f-43bb-bd5f-070315d37d1c"),
                            Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = new Guid("0bcc8808-29cb-4217-8981-ca372c482896"),
                            Code = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = new Guid("2171bdb3-6878-43ff-b21d-d62110c78a94"),
                            Code = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = new Guid("dfa4e2ed-1c3a-4cf2-b5f1-c2ce32a25f1a"),
                            Code = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = new Guid("a4687232-b840-486b-bfe8-9c5cd79b155a"),
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("895053f4-8367-4b29-8ebf-8475be692529"),
                            Code = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = new Guid("98c308f4-bff6-402e-88a5-64ac1ff12801"),
                            Code = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = new Guid("aa5dd3ab-1338-47ad-ab80-f8a761e46c9a"),
                            Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = new Guid("084fcdf8-6013-4dd7-9549-59d7aab656ad"),
                            Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("3e03094b-9b87-4666-a596-94054d36e79e"),
                            Code = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = new Guid("8c0d9714-da45-42c2-a618-8423f96ac1cd"),
                            Code = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = new Guid("543e95c6-6fd7-48b7-a030-fb6224a1092c"),
                            Code = "CG",
                            Name = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = new Guid("fbbf5b6e-ba97-4409-886d-454f5348d2b4"),
                            Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = new Guid("997018f5-dbca-44fc-b81b-e589685ff52d"),
                            Code = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("7312e068-43e4-4c8c-beab-b717c7c77e38"),
                            Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = new Guid("2147497a-4099-4e38-8d71-129b53a84832"),
                            Code = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("5461c0af-eed8-4af9-aaaa-25d88d7cf2b7"),
                            Code = "CZ",
                            Name = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = new Guid("5795c7e0-59e0-4856-bb61-edd74621b42d"),
                            Code = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("d719ad5f-b224-474d-8c18-7693999c693b"),
                            Code = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = new Guid("45213ea5-f7bf-483d-89d9-b9050f48c6b3"),
                            Code = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = new Guid("e1bb853d-9588-4512-8753-d8db15c985e0"),
                            Code = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = new Guid("d995d5e8-37d9-4520-8c91-d01f2a0d9508"),
                            Code = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = new Guid("2f11efe6-3456-4711-b6f5-4d135c1fd1b8"),
                            Code = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("c60a70fa-d789-4be5-a5c9-42652b898697"),
                            Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = new Guid("04caf9ea-5e25-407e-8240-5c1a3c704470"),
                            Code = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = new Guid("81e14200-5052-474e-a4da-e0339b956bb8"),
                            Code = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = new Guid("18875708-73bf-4920-8f08-630f9160a5f4"),
                            Code = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("c2c61b56-2a9d-423a-b8d8-7b5885a4f847"),
                            Code = "SZ",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = new Guid("c667b7d2-b355-4025-abd3-d336fc72966c"),
                            Code = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = new Guid("e395d9fc-7a25-41af-bb2f-5bdf16bcca3d"),
                            Code = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = new Guid("933645f8-9e7c-495c-8041-ba5e33d54faa"),
                            Code = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("ee74b93c-56cd-4cc7-8d03-04599077e04b"),
                            Code = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("8dad67b5-1d15-4b5a-9fe2-4b0b13307bf8"),
                            Code = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = new Guid("bc485582-cd0e-46f1-93f5-323ad149d6c0"),
                            Code = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = new Guid("cc95f404-c5e6-45fe-8821-4fe3db86d022"),
                            Code = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("b945b9eb-a37c-4707-a50f-44bfe0081855"),
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("ec875260-95f3-4565-bc5a-65e40e9dc719"),
                            Code = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = new Guid("e16790cd-c4ce-4122-843c-1e66cb884457"),
                            Code = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("84b99a10-4e73-4595-95d4-02eb7087ff26"),
                            Code = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = new Guid("e36588fc-9950-4f17-a4ba-01ce4c7473ad"),
                            Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = new Guid("06fdc711-5909-462d-93bf-2642e2978d1b"),
                            Code = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = new Guid("c39c153b-2356-47ad-a264-ef6fcb03c747"),
                            Code = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = new Guid("eb30bb18-cb3f-40b0-a707-ccf32dbd3e4c"),
                            Code = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = new Guid("8277d960-fdc1-4e7b-9608-2f1bfe8d1dab"),
                            Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = new Guid("f76f3fc5-506a-4ca7-b69b-e272c2bd3515"),
                            Code = "VA",
                            Name = "Holy See"
                        },
                        new
                        {
                            Id = new Guid("2ddc577c-4792-48b2-a1fb-ad5ebd308e00"),
                            Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = new Guid("18ac3bad-543a-40a8-8ad4-add12db679ed"),
                            Code = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("5119b22a-3452-41a7-8656-0cdcc3f5b2ec"),
                            Code = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("c5f86164-5ff8-4c4f-853e-7a5cb91840c9"),
                            Code = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("e434fe64-6a27-4f2d-810e-5d3dce8c13f9"),
                            Code = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("bd845f84-a5e0-442b-9efa-2cc4e4960568"),
                            Code = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = new Guid("a00e41ef-aa01-4ebb-a599-7a1b4f04b3fa"),
                            Code = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = new Guid("42ea6f9a-33ab-455a-8d56-4e4b15802e8f"),
                            Code = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("0361fa73-1ee8-4ece-872e-0fae9e661385"),
                            Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = new Guid("9544eacd-53d8-4356-ae85-d6e226a1287b"),
                            Code = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("f9cb2b7f-9d18-4e99-ac34-fa291edebaad"),
                            Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = new Guid("6a7ccd11-c0c8-406c-bbc7-93bc19d8fc86"),
                            Code = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("3161d231-f8cc-41a0-9af4-dcf381fd073d"),
                            Code = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = new Guid("d4fc87cc-108c-4e8b-abb1-79257ffe212e"),
                            Code = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = new Guid("4b81990a-b47f-47cd-a263-edf8071a1d1d"),
                            Code = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("24620e81-f64f-4841-b861-5322aea9d58d"),
                            Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = new Guid("96ad5162-3f8d-45fd-9095-104bf37b9f98"),
                            Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = new Guid("7438cdf4-c21c-4ea9-b71e-d55734528aac"),
                            Code = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = new Guid("6f1520eb-06e8-4136-a82e-ab46ee4deb24"),
                            Code = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = new Guid("5a6e2df7-11ed-4067-9a2e-ccee25104c40"),
                            Code = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("64837e21-141c-469c-9f8a-38a6716bd510"),
                            Code = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = new Guid("08f0d065-6fb7-4879-8168-3a401ac26a8e"),
                            Code = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = new Guid("5ee6ca4a-0034-4e65-980e-d5244c73bc4b"),
                            Code = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = new Guid("80af83f8-0069-4509-93fb-54827e1db98f"),
                            Code = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = new Guid("08347e49-8cc0-4b03-bf7f-f11b577d3636"),
                            Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("64d5c941-a966-4e70-82f7-bbd433b7fe66"),
                            Code = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("964f6b7b-2aa8-476c-bf69-18cb0a3a9710"),
                            Code = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("1aefbe0b-8bb1-457a-8874-397978829e88"),
                            Code = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = new Guid("6ca6bb67-2e05-41ac-8d9c-6dbcca6eb581"),
                            Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = new Guid("b0b87074-9f5f-4379-98c0-5c1a21ee4c58"),
                            Code = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = new Guid("e8a33fc5-d0ca-47d0-bcf1-c737819dfe31"),
                            Code = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = new Guid("30978597-0e23-4d6c-8696-b0f5c94ffa6d"),
                            Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = new Guid("9a950678-40ac-4c5a-96df-f6c927e6f667"),
                            Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("2f6f70f4-2650-4f5f-b0af-6a308ba56ddf"),
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = new Guid("58ce60f3-90f9-4143-a89f-f0420a18f08d"),
                            Code = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = new Guid("e29717c5-8856-4812-ac14-221194ecacf1"),
                            Code = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = new Guid("d7a547e0-c5ab-4008-97fc-9d00d58a5dea"),
                            Code = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("43352cb7-0c27-483e-8ff7-5bb764d3e2a0"),
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = new Guid("bef4df71-20ac-496e-b1c4-5c4da9de9898"),
                            Code = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = new Guid("5d971e39-c783-4d8b-a822-75cad58ca1da"),
                            Code = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = new Guid("4b682353-afc0-4e55-a573-566bc15afb0e"),
                            Code = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = new Guid("2a2a404b-cbba-4a4a-a538-df4aaddd12ab"),
                            Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("693a0670-0332-4d34-97b7-0de8db3e6857"),
                            Code = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = new Guid("dd175d33-11e8-4496-92a6-9efebdd204ab"),
                            Code = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = new Guid("dddfe4a6-1bb8-4c0b-b148-fd6e923763c3"),
                            Code = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = new Guid("a532f409-7f05-4bfe-86b0-c4855463d3be"),
                            Code = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = new Guid("91dc4b8c-8dcd-45b2-a640-9004ed94082e"),
                            Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = new Guid("f7b90793-01fb-47db-bd6a-7420090eb083"),
                            Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = new Guid("6e9e0a5e-5bdd-4449-868f-2f595fb9214e"),
                            Code = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("f5b7438c-07ef-466a-b1be-7cdcfac13cb4"),
                            Code = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("c011ed7b-29db-40f6-84ae-991ad58e23df"),
                            Code = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = new Guid("8f1e12de-1e2d-4931-a49d-a067fbb70091"),
                            Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = new Guid("1263c9b4-d007-4e2c-8c10-54dcd5dda77b"),
                            Code = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("7efb8480-2080-4172-b5fe-74d5b09ea8cb"),
                            Code = "KP",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = new Guid("f55ff955-205a-42fc-81eb-27b0c66c5b4c"),
                            Code = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("f3d7f662-f38f-4202-9183-20903dd3acb6"),
                            Code = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("efbab887-ba1d-42da-b84b-f8784e45b1df"),
                            Code = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = new Guid("e03c9961-f9ea-4107-83b5-83934c680c9d"),
                            Code = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = new Guid("43e3008c-86db-4ddc-b871-aebc72b0c8f6"),
                            Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = new Guid("c54c165a-b21a-4073-a80f-d514ada4ae25"),
                            Code = "PS",
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = new Guid("ddc58846-d5be-4469-8f0b-89a3820dc87b"),
                            Code = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = new Guid("62545fc8-32db-489f-a3b7-b4fdb1c2a9c1"),
                            Code = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = new Guid("2ee0c302-2ed8-434a-898a-1f991833a6f3"),
                            Code = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = new Guid("55fa9d23-3769-4864-95d0-eac5d0c42801"),
                            Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = new Guid("921f06e7-2c88-49cf-b47d-e37230d2197b"),
                            Code = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = new Guid("1d389e76-3fba-40bc-8d62-7e127e0332af"),
                            Code = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("c20c037a-f3bf-4cc2-b4f2-3c3a53db8b1d"),
                            Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("1bba82b2-ded8-4376-977d-ea995cce015b"),
                            Code = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = new Guid("21d04ccf-1520-41bd-b388-7a039fde31de"),
                            Code = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = new Guid("ee5582df-3b23-4659-9c65-c9062506358b"),
                            Code = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("77d4ae32-f022-43d7-93ce-701131c0d127"),
                            Code = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = new Guid("f309a90c-77a0-4ba9-b395-87385f78c472"),
                            Code = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = new Guid("129800ba-af72-4801-8b72-947be0a0093e"),
                            Code = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = new Guid("e5667af0-c5fe-49ef-9864-8b07e08636c4"),
                            Code = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = new Guid("b42e654e-422c-497c-a58e-365009a2b194"),
                            Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = new Guid("43ac9bb3-fc92-4e83-990a-b60ae3d68850"),
                            Code = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = new Guid("aadbfb78-1397-4a94-9239-a14ba4a5e2b3"),
                            Code = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = new Guid("8b107ea6-818b-4e48-b118-0c7986b93655"),
                            Code = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = new Guid("a67146b4-915e-4f31-98ca-96bad6e5c0da"),
                            Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = new Guid("d99595f7-9005-4ca5-841c-a30f99b70a0d"),
                            Code = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("fce955c0-401d-49a7-838e-70549141ae3f"),
                            Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = new Guid("761da197-22d1-4375-96d0-01edce177ed2"),
                            Code = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("bb382f49-bde8-42de-b454-f3afd11116a9"),
                            Code = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("a8949c27-63ca-451f-a14f-1cdd349bd020"),
                            Code = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("d8c8e8f3-3d02-4835-982f-f5495ed70edb"),
                            Code = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("df077799-8782-4693-9464-3ca01ac5fe45"),
                            Code = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = new Guid("e415c4af-c892-4d75-a719-3639801b729d"),
                            Code = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = new Guid("1135e88b-a56e-4174-a8cc-f9840c21af5d"),
                            Code = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("8a079488-2f26-40a4-8fd1-82d4f7d06c64"),
                            Code = "KR",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("d35515f1-8568-468c-8fa7-b21825e6b0d9"),
                            Code = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = new Guid("2acb0c00-ba8a-4a2d-ba84-cff14fb31e4a"),
                            Code = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("bb44eb42-9f44-49fd-b316-ae88b9be1757"),
                            Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = new Guid("1f02aa2c-7473-4252-8bb9-689a2dda842f"),
                            Code = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = new Guid("232ccf82-7e7b-4308-a7b1-9fb4c0a4d51d"),
                            Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = new Guid("4495a504-7493-450c-92b9-e7128f41eb14"),
                            Code = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("1725864a-0b4f-4302-a3f3-fcf722c6c03d"),
                            Code = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("cd5de2f4-e973-4194-a9a1-e622f30097a2"),
                            Code = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = new Guid("2bd7a3a4-494c-4edf-b340-35009d160f5b"),
                            Code = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = new Guid("376fd354-e025-44e9-a08c-cf41d1be7783"),
                            Code = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = new Guid("57b2f108-6f83-4188-9e49-ef884a7494ba"),
                            Code = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("b1d0e10c-ce63-469d-a254-739e8823d031"),
                            Code = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = new Guid("91301e6f-713f-431b-aa91-dd671b92113f"),
                            Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = new Guid("56ad5ed5-32dd-41ff-b649-86ed27069483"),
                            Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = new Guid("bfe5ba56-142e-4420-93ec-46758a30c0ea"),
                            Code = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = new Guid("a62feb8e-ccc8-4e6e-aa20-68bf13399dfb"),
                            Code = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = new Guid("6a318801-b6b0-4568-8a5c-384a5058fec6"),
                            Code = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("3e59f609-58a0-42fa-9da3-031aaef72e29"),
                            Code = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = new Guid("07278c05-8c63-4d46-9605-d83853c9b61c"),
                            Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = new Guid("7dfd51b4-b3ab-455b-877a-7478482e4641"),
                            Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = new Guid("8a9f4b6a-b76c-4041-9973-017d9c54aabb"),
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("a70c1352-a504-4a7c-a4da-357eea026c07"),
                            Code = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = new Guid("d6e6ea6f-ce53-4ad8-98de-786b0737771a"),
                            Code = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("39bf2f3e-2ba8-4cd1-afd2-ae4cf05e37a6"),
                            Code = "US",
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = new Guid("610f12e9-2a38-443b-98f8-5ddcd8a6bbce"),
                            Code = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = new Guid("c9ec16e4-f2db-4e49-bd9d-81a2c0c39674"),
                            Code = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = new Guid("28f6e424-988b-4f5c-a04c-fef3ffaafb7a"),
                            Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = new Guid("ef482d63-b2c7-4e31-a8b1-54a3eab009b5"),
                            Code = "VA",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = new Guid("b5c54e4d-5fde-43a8-a662-9a2407683c89"),
                            Code = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = new Guid("641b6885-604b-48c3-9fc5-33a62e688156"),
                            Code = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("6c69f99d-993d-473f-b65b-d2bbd8f22cc7"),
                            Code = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = new Guid("012f18f5-fa7a-4c80-a5d7-2307e0ebf825"),
                            Code = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = new Guid("6448f215-c245-4b44-8912-6a8dcef2f6c8"),
                            Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("DoctorDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorDetails");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorEducation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("DoctorEmailAddress");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorExperience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorFirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("DoctorImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("DoctorSoftDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorLastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PhoneNumber");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorSpecialty");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("DoctorTown");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("DoctorId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("DoctorBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("DoctorId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("DoctorInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.HasKey("DoctorId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetGenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("GenderName");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67fdf752-c3d9-4bc4-98c0-b0a960ad5c64"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("dc5093d6-7574-48ae-9da5-1f18652358ed"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<string>("DescriptionFromDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("DescriptionFromUSer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<bool>("IsInterventionDone")
                        .HasColumnType("bit")
                        .HasComment("InterventionStatus");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("PriceForIntervention");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetBreed");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("PetDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("PetAdditionalDetails");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("GenderId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("PetImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("PetSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PetName");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int")
                        .HasComment("PetNumberOfPassport");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetSpecies");

                    b.Property<string>("TransponderCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("PetTransponderAlphanumericCode");

                    b.Property<string>("TransponderLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetLocationOfTheTransponder");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Booking");

                    b.HasKey("PetId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("PetBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("PetId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.TypeIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeInspectionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("TypeInterventionName");

                    b.HasKey("Id");

                    b.ToTable("TypeInspections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("459edb42-5f90-4ac0-85c3-6a874f813045"),
                            Name = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("143b8ab5-5dc9-43f9-882b-dca63734d151"),
                            Name = "Diagnostic Interventions"
                        },
                        new
                        {
                            Id = new Guid("8125a7d4-eed0-4382-a668-923256757c3d"),
                            Name = "Surgical Interventions"
                        },
                        new
                        {
                            Id = new Guid("360831f6-87fd-4bc1-946f-24e165c5f661"),
                            Name = "Therapeutic Interventions"
                        },
                        new
                        {
                            Id = new Guid("7137f2f3-b39f-4183-bf67-5f0ccc655d9e"),
                            Name = "Dental Interventions"
                        },
                        new
                        {
                            Id = new Guid("3362a24f-bf98-4e78-97d9-23d03b6e4aac"),
                            Name = "Obstetric and Reproductive Interventions"
                        },
                        new
                        {
                            Id = new Guid("256b93d9-7d5a-4a44-9a2d-a3b4a4f03612"),
                            Name = "Exotic and Specialized Interventions"
                        },
                        new
                        {
                            Id = new Guid("df66d65e-e74a-4f73-819a-87aefac3e28e"),
                            Name = "Preventive Interventions"
                        },
                        new
                        {
                            Id = new Guid("f317f5b2-3829-49f3-b977-b27bb027a064"),
                            Name = "Oncological Interventions"
                        },
                        new
                        {
                            Id = new Guid("624d487e-5ad7-499f-acde-c8d25be9a80f"),
                            Name = "Postoperative Care"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("UserDetailsId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("UserBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("FirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("UserDetailsSoftDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Town");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserDetailsId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PetId");

                    b.HasIndex("PetId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("UserDetailsPets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorInterventions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorPets")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetBookings")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetInterventions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany("UserBookings")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany("UserDetailsPets")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorBookings");

                    b.Navigation("DoctorInterventions");

                    b.Navigation("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Navigation("PetBookings");

                    b.Navigation("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Navigation("UserBookings");

                    b.Navigation("UserDetailsPets");
                });
#pragma warning restore 612, 618
        }
    }
}
