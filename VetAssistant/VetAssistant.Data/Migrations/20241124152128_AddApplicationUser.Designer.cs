// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetAssistant.Data;

#nullable disable

namespace VetAssistant.Data.Migrations
{
    [DbContext(typeof(VetAssistantDbContext))]
    [Migration("20241124152128_AddApplicationUser")]
    partial class AddApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingInterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicAddress");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicEmail");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("ClinicSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("ClinicName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ClinicPhone");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicTown");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicWorkingTime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("CountryISOCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41c14f08-1031-4ebe-81bf-bfc90b15193c"),
                            Code = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = new Guid("9ff05672-47a9-45fd-9520-b451e18ff305"),
                            Code = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = new Guid("850f34da-0666-4e17-b53e-ce6c5f405c06"),
                            Code = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = new Guid("72986f4c-7946-4c2b-8a9d-ebcd2e9dedc4"),
                            Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = new Guid("6bd9c307-3988-4709-b64c-2e3212a9f6c6"),
                            Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = new Guid("b5e528c2-f351-4b6c-9e79-0ac6efc776bc"),
                            Code = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = new Guid("ed00984a-2cb2-4fb7-87e4-a7721bf55b13"),
                            Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("e4db4241-c5b0-42e8-bf2c-367a975d1480"),
                            Code = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("0f91a6c4-2e89-45fb-b198-2eed4f143eef"),
                            Code = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("0c59c08f-9676-4409-9195-b8d411264d45"),
                            Code = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("f405bc72-76b6-40dc-8928-5a416710ed6c"),
                            Code = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = new Guid("4cfb7e2c-1053-40de-83cf-f545597fc74f"),
                            Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = new Guid("e4e4ae3c-dff9-40d4-9cb0-fd203dac568e"),
                            Code = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = new Guid("3f0f3fbf-e870-48ec-bf41-987f1771df6b"),
                            Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = new Guid("1afcc9a1-6d97-429c-a328-9a64198c4abc"),
                            Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = new Guid("eb4f3f73-3dcf-459e-b805-e2dddee2d03b"),
                            Code = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("3884919f-f8e9-4f26-ac95-b63aa4c8b6ef"),
                            Code = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("9e9734f6-86e4-4d39-ab0a-85fbe609b770"),
                            Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = new Guid("3a0cc9b3-cdfb-4223-8e57-7c3915ca2d08"),
                            Code = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = new Guid("b5ed5a3d-9631-4bf0-9344-77c54287116a"),
                            Code = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = new Guid("d753af1e-79d6-4ece-bcec-ae19ab987f17"),
                            Code = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = new Guid("f5d328a4-98c9-43d2-8bda-2371a0cc8e48"),
                            Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("26aeb05a-22d3-4621-a2c9-e4c75877cfb8"),
                            Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = new Guid("e4027efa-2f43-4ec9-994b-02021724b896"),
                            Code = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("af98abd4-72a6-44ef-8468-daa26e554d0f"),
                            Code = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = new Guid("5e88ec47-d340-4372-87d3-935c1e03293c"),
                            Code = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("2332d96c-5909-484a-a3e4-c5d140031854"),
                            Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = new Guid("019ea4a7-97bf-4b32-a4d0-585ada74d5f7"),
                            Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = new Guid("4d22af2b-a549-4fc8-920b-c59e1fb7904e"),
                            Code = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = new Guid("d3744a05-d30b-4f59-afa3-2eec1e0b632a"),
                            Code = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = new Guid("9ca20b73-03db-4be7-b5c0-ccb204f44e40"),
                            Code = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = new Guid("f639a470-b16c-413a-9e24-7fbc765d3fda"),
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("a0495bd2-110c-4e1b-b15e-cf8036de8c10"),
                            Code = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = new Guid("f6b9409b-9768-4a8d-80aa-a8561252874f"),
                            Code = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = new Guid("7f12851f-a744-4963-9297-51a8b9012eeb"),
                            Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = new Guid("52cf840a-fa31-419c-a4d0-c99c04488236"),
                            Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("a59f501d-aac9-4f84-b3dc-7d4f1938b40d"),
                            Code = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = new Guid("ea0abebb-8472-4265-bb1c-48fada4025cd"),
                            Code = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = new Guid("2da7dd2f-35cf-40df-a1e9-51856b99eccb"),
                            Code = "CG",
                            Name = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = new Guid("1bd98bd6-d701-49c6-a6b2-51dca24daabc"),
                            Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = new Guid("e775829c-1205-49ef-b806-f409d656e502"),
                            Code = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("1b552f57-4aa5-4d3d-80fe-8f9a2fa0e196"),
                            Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = new Guid("cbdb4508-874e-47fd-b2a6-0b5f626eccf8"),
                            Code = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("ebe30489-b663-4be8-8168-5eb40cf08210"),
                            Code = "CZ",
                            Name = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = new Guid("1c5ccb34-9430-40d9-ab19-dda456075abf"),
                            Code = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("6bd2e193-70cf-475e-8f07-d590e29cc35e"),
                            Code = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = new Guid("069eaa5b-09fc-4f2a-b892-a3feaa4011c8"),
                            Code = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = new Guid("ace5d174-6019-439f-802b-828f2e1b0913"),
                            Code = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = new Guid("d1b1f36a-fca6-493a-a026-36abfa20a9a8"),
                            Code = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = new Guid("b65e6c04-d4a6-4ba3-b004-722d9bfdf382"),
                            Code = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("6a9ca749-a489-4bcf-8440-845a260bd023"),
                            Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = new Guid("55c88be5-7313-466c-9add-5a4401519655"),
                            Code = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = new Guid("22dd845f-2e66-4c7a-89af-0d09635f661e"),
                            Code = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = new Guid("3f06cecb-e45e-4bc2-87e5-8a1a4afaa16e"),
                            Code = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("0f17842e-5305-482c-94bc-bf8179eb5a8f"),
                            Code = "SZ",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = new Guid("486bcdcb-30c9-4d7a-a3df-33e0fff0a441"),
                            Code = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = new Guid("117f7de1-6b9b-457f-a43b-42664a1c6f91"),
                            Code = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = new Guid("568a9991-25e8-4ed3-b2fb-49169bf5b655"),
                            Code = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("144ab89e-265f-4d32-ac79-306ca985b5e5"),
                            Code = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("8970d5f6-0501-4307-a0ba-0f75538125ce"),
                            Code = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = new Guid("f2bb8f44-420b-41fe-855f-872c6b460bee"),
                            Code = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = new Guid("a64e2909-7ffd-43fa-a359-17618e62d488"),
                            Code = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("8b30d322-e903-45e7-9ec2-c5d78bdb68be"),
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("745ec8e6-ba71-492b-af50-6f9a8b911faa"),
                            Code = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = new Guid("2ca9a516-1084-4ba8-9886-69e2602be19f"),
                            Code = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("da468dc7-6734-425c-bc90-bafcb943b326"),
                            Code = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = new Guid("df0f9bfd-9bb6-4876-9c8b-6686653cc773"),
                            Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = new Guid("7c0d69b2-5092-4a44-b86a-78622a0fb994"),
                            Code = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = new Guid("e90d0b37-6123-4859-a221-73e93a60cafb"),
                            Code = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = new Guid("9c13d193-2693-44b0-92cc-34b3520de082"),
                            Code = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = new Guid("510c1b8a-38d5-4a79-b0c0-7e35aeb2f849"),
                            Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = new Guid("a8bc6882-1433-494a-93b7-7fd25916bcd2"),
                            Code = "VA",
                            Name = "Holy See"
                        },
                        new
                        {
                            Id = new Guid("3ebb4011-d5d4-4133-b2d2-fd13d7626117"),
                            Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = new Guid("9c7db7e4-e893-4b95-b620-e795223056a1"),
                            Code = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("11d7438e-5906-4562-911f-761b72a1d5df"),
                            Code = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("4374401a-9e91-434a-92db-772b337222ba"),
                            Code = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("44749bd1-6ffd-40a9-bb1d-2199adceae5e"),
                            Code = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("001a8880-3a86-4662-9700-fed0efbdfc18"),
                            Code = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = new Guid("34d54fe0-cb92-4f30-9796-817e1e22e725"),
                            Code = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = new Guid("5468d832-cf8f-44b2-a986-992225de6ba5"),
                            Code = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("2d647d1c-c6ec-43e2-a5c2-4af609270042"),
                            Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = new Guid("49851770-52a5-4b6c-a585-a30b51eecf13"),
                            Code = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("8b24ee85-b036-4132-b1a9-50bf877b172d"),
                            Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = new Guid("669ebf58-8389-4b04-979a-0fa190079a61"),
                            Code = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("ce33e505-ffe6-4e13-b421-cc15e954bef5"),
                            Code = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = new Guid("3637bc31-cad9-4819-ac3c-2b96cdf0fa4a"),
                            Code = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = new Guid("5039518f-4b71-4b66-8309-750932389f76"),
                            Code = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("be3d8666-6154-4115-886f-edc0ca6b3de9"),
                            Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = new Guid("6be53929-5c9b-42f4-89a8-ecfe25d78b4f"),
                            Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = new Guid("aa5adb28-3aab-4e7d-9b10-d27bea7b8c07"),
                            Code = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = new Guid("3a50bdf4-5d98-4d3b-a69d-c7ff7d3cb5ba"),
                            Code = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = new Guid("e41be010-049e-4cf7-888a-968cddc8dcaf"),
                            Code = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("5bff4d13-ec23-45e9-8b44-8dc779fcc8ca"),
                            Code = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = new Guid("351c302f-390c-4101-9976-c17d190e25b9"),
                            Code = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = new Guid("31c56b95-f994-4636-bcae-b0cb12af0b06"),
                            Code = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = new Guid("bb6cbc67-66f2-4b8a-9690-07035521f9ab"),
                            Code = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = new Guid("df66a0b8-ea0e-4c46-94f0-ac79d63035a8"),
                            Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("47d3d1c0-de91-48aa-8758-fb8d1f884ee7"),
                            Code = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("29058c5c-aeef-4fd8-8e38-614bab43cff1"),
                            Code = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("e0f5fb10-b3aa-48bb-a300-3e84db187c90"),
                            Code = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = new Guid("65d6bbf6-ff83-4fc6-86c0-053b15fb4baf"),
                            Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = new Guid("1c972d87-3712-4033-aa24-dcc06c54e2f9"),
                            Code = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = new Guid("e10139e3-a1e2-4913-9801-9038f3cf844d"),
                            Code = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = new Guid("769d7eb6-28c5-4ceb-83d6-b17f579c21eb"),
                            Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = new Guid("1dee34a6-3702-4b2b-90ee-3edbf0f3f885"),
                            Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("6706ebc4-5d07-445b-b171-0fac1252210b"),
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = new Guid("c1412c8c-66f3-41e0-be8e-049f2e74c05d"),
                            Code = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = new Guid("f35b67c9-9f7b-4841-b960-ed5454c05a95"),
                            Code = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = new Guid("67a49f59-e442-4fd2-8118-34a68109fde9"),
                            Code = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("49406440-4ab5-4ef4-ba1b-c8363f39a248"),
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = new Guid("c75b334a-95a1-432e-b645-a045cd6f3d9a"),
                            Code = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = new Guid("d9bdb07d-5e3e-43dd-86fc-7faa6d320043"),
                            Code = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = new Guid("c3c06a64-53ef-46ec-8934-dd0a86d4e4b7"),
                            Code = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = new Guid("7c8f62c9-2216-48a4-99ad-c69112207e63"),
                            Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("ce2c5bdf-b0e0-4ae9-aa2f-cc2be81de80e"),
                            Code = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = new Guid("1a46a0bb-5819-4180-8588-9f63cc0c5e8e"),
                            Code = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = new Guid("47624dfb-4da2-4417-a19e-87ee5f72a214"),
                            Code = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = new Guid("24e3b88c-7339-41e1-8863-d50f5df494af"),
                            Code = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = new Guid("9aa7af95-a421-4a4e-844a-63f086de014c"),
                            Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = new Guid("e363c141-6d1b-46d9-a054-a5f6b932f7fe"),
                            Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = new Guid("fc069785-84a9-4cbc-8b52-84c14789eb24"),
                            Code = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("f1a25a7b-dec3-4dfb-bdec-d1aeebd40c4a"),
                            Code = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("390b2bdd-52ca-4462-976c-1fc45026d1b2"),
                            Code = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = new Guid("ddabb73a-fcab-47ff-aad1-9809cbbb47a4"),
                            Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = new Guid("027d7f27-43ef-42dd-9fac-993c0ac66246"),
                            Code = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("a248757a-8d35-49b1-b4f8-cbc16ee07d41"),
                            Code = "KP",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = new Guid("3acd4d11-62ff-4b85-a09f-323a6b13bf57"),
                            Code = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("93d87527-398e-4286-90b0-bef57f2d5b0a"),
                            Code = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("89d04e77-be76-4b0c-be23-76b78a4ab2ca"),
                            Code = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = new Guid("9d7f7541-f071-46b8-9b28-44d5a701d394"),
                            Code = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = new Guid("7696088a-3d64-423e-be63-36c85bb59939"),
                            Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = new Guid("1ee3a3bb-8191-4a43-99b9-edf6b10e8662"),
                            Code = "PS",
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = new Guid("217491c1-0fa6-424f-8ce6-83e53d106008"),
                            Code = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = new Guid("ffdf2174-a986-4bdf-83ce-28747d150642"),
                            Code = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = new Guid("38df4665-8ef5-467b-a2e5-6308f1bc8582"),
                            Code = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = new Guid("1c0bc965-dc20-4e4b-899c-8f42b4e6d1f1"),
                            Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = new Guid("38d4adff-7943-47c0-b905-3e546b7af640"),
                            Code = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = new Guid("5ff9bf47-bc62-4a02-b08a-4d18528d3eba"),
                            Code = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("ce2bf619-a957-450f-84b5-117939af046b"),
                            Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("f9b5bcae-0a4e-4da9-9f46-5e5402e8afd7"),
                            Code = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = new Guid("add562dd-86f6-480e-8724-e2f2f2b3de1f"),
                            Code = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = new Guid("3e8a1907-4099-4037-8439-5fe2c1f622df"),
                            Code = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("3f862269-9706-463c-ab93-6e0163556fc6"),
                            Code = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = new Guid("06f89017-2a24-44f6-9767-b51a376fc8f7"),
                            Code = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = new Guid("1336d3fb-2302-40ee-922b-1fd38e202296"),
                            Code = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = new Guid("de879b39-735a-4d68-a95d-b6f43f3b530b"),
                            Code = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = new Guid("f566afd7-2578-4412-a5b5-2034ada1ac32"),
                            Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = new Guid("a91beb74-41a6-4163-a376-9cb6ee51a4c4"),
                            Code = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = new Guid("3fc3fb86-c417-4b32-a04f-72a61ad1ffb0"),
                            Code = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = new Guid("f63df191-ff93-45bf-b845-2ab294a53ddb"),
                            Code = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = new Guid("8916a39b-0e03-420f-a2a0-af53bffffbb0"),
                            Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = new Guid("9d795d48-4a0a-4857-9795-4fc40cfb1bfc"),
                            Code = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("368ef340-a460-4528-ba57-3a39c2bc94d1"),
                            Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = new Guid("1fa55c61-c48e-4cce-9882-bf1297a73d25"),
                            Code = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("24e6e5fe-6310-495d-89ed-d902c229778c"),
                            Code = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("e01cedb4-9990-46fb-83c4-c42268b67e7c"),
                            Code = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("211cda1a-5d26-4a12-92a0-6caed9b2a16e"),
                            Code = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("440996a1-d9c7-433b-9d61-8b1a6c14f6a5"),
                            Code = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = new Guid("80e97538-0f2a-4a61-939d-5c342d244f7e"),
                            Code = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = new Guid("cc4458cf-6c44-4684-aa59-15360266151f"),
                            Code = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("6a633955-fb31-4d7e-9371-8fb25691c20e"),
                            Code = "KR",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("b2f31bc1-c43c-437d-b22c-4c92fb8ccbfa"),
                            Code = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = new Guid("5cc572f6-177e-4f86-9962-0d595215d75a"),
                            Code = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("f798c880-1367-4984-91f0-945eaf0e1af1"),
                            Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = new Guid("0b1ca580-e4bf-4aca-909b-10241207b7ed"),
                            Code = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = new Guid("fba0729f-1367-40e5-91a9-a0dd6a8c3254"),
                            Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = new Guid("4b55432f-116d-41bd-864a-55e4f0ed1442"),
                            Code = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("3dfd3ade-485e-4a0f-b707-e9bec778788c"),
                            Code = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("6dd474df-6eab-4720-ad44-44b54faed462"),
                            Code = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = new Guid("b9df90d6-b22d-4942-9a29-c6ebf0174576"),
                            Code = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = new Guid("79912503-47b5-4e4b-a3fa-7f3815c75f9e"),
                            Code = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = new Guid("c20a0db1-dc47-4de7-a7c4-7c4cc7980994"),
                            Code = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("45888f1b-fb4d-4e98-8232-4fbe62e4b78d"),
                            Code = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = new Guid("202b1fee-fd4b-4971-babd-a41808692dbd"),
                            Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = new Guid("540549a8-75f7-4929-8fae-9a089b4644de"),
                            Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = new Guid("486ba6b6-829e-4cfb-a17f-70d03e735567"),
                            Code = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = new Guid("5716d749-acb7-4d66-a644-e740c03a607b"),
                            Code = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = new Guid("a6b86d1e-5cc1-428d-9ef2-fe05257dc651"),
                            Code = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("713844ed-ba9a-491a-8999-0495b50577f8"),
                            Code = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = new Guid("261515d3-0ea0-4641-8179-88a42ed2a5c7"),
                            Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = new Guid("979e37f6-2b0f-47e1-b41a-f230393e1abb"),
                            Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = new Guid("d5b0ab8c-83b0-4fcd-adae-241aeac25de3"),
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("07199ab7-325a-4a8e-a2a6-58e1eaed24bf"),
                            Code = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = new Guid("74f9e291-6b4f-4627-9471-4af6fc7baeee"),
                            Code = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("cd789399-87a7-4d85-9cc6-134b87312e10"),
                            Code = "US",
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = new Guid("026e6c04-7538-48d4-8672-1b5f29f9d5c9"),
                            Code = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = new Guid("a71c4359-37ac-4de1-85ff-14dbf4bf2d74"),
                            Code = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = new Guid("5510d9c8-87c6-4bce-8f08-7a551078b183"),
                            Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = new Guid("34f28d89-7eb2-45f3-987b-82b80670f1a2"),
                            Code = "VA",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = new Guid("26b0bc35-0e89-41e1-8997-ccef00310f45"),
                            Code = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = new Guid("826021a1-70e5-44cf-8335-09bd9e4d42f6"),
                            Code = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("b15ba8ec-2ed3-4863-9221-a897e8fde1d6"),
                            Code = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = new Guid("e7bcd677-0b16-4103-afe1-3ccd9e2f9445"),
                            Code = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = new Guid("6f11bdbe-ef52-4766-9694-cadc7eb34913"),
                            Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("DoctorDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorDetails");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorEducation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("DoctorEmailAddress");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorExperience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorFirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("DoctorImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("DoctorSoftDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorLastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PhoneNumber");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorSpecialty");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("DoctorTown");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("DoctorId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("DoctorBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("DoctorId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("DoctorInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.HasKey("DoctorId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetGenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("GenderName");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02f3799e-194f-48dc-9344-b821233486c3"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("d931b9fb-23a4-48a7-96cd-8995aeef6c40"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<string>("DescriptionFromDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("DescriptionFromUSer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<bool>("IsInterventionDone")
                        .HasColumnType("bit")
                        .HasComment("InterventionStatus");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("PriceForIntervention");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetBreed");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("PetDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("PetAdditionalDetails");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("GenderId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("PetImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("PetSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PetName");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int")
                        .HasComment("PetNumberOfPassport");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetSpecies");

                    b.Property<string>("TransponderCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("PetTransponderAlphanumericCode");

                    b.Property<string>("TransponderLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetLocationOfTheTransponder");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Booking");

                    b.HasKey("PetId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("PetBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("PetId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.TypeIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeInspectionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("TypeInterventionName");

                    b.HasKey("Id");

                    b.ToTable("TypeInspections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb9f72e7-9708-484b-87ab-46cf48f05b0b"),
                            Name = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("80247486-4447-4711-af55-19e214043d4b"),
                            Name = "Diagnostic Interventions"
                        },
                        new
                        {
                            Id = new Guid("65f90c23-7ccf-4e3a-920f-1278d45b953a"),
                            Name = "Surgical Interventions"
                        },
                        new
                        {
                            Id = new Guid("776f5a58-28cb-403e-8418-ae3768d5a3fd"),
                            Name = "Therapeutic Interventions"
                        },
                        new
                        {
                            Id = new Guid("3696b1b4-ba89-4c97-add3-dfcd2ed27deb"),
                            Name = "Dental Interventions"
                        },
                        new
                        {
                            Id = new Guid("499b816b-e364-4154-92a7-1cade1413415"),
                            Name = "Obstetric and Reproductive Interventions"
                        },
                        new
                        {
                            Id = new Guid("f493526d-e4c9-43a5-904e-129fdb4fcc04"),
                            Name = "Exotic and Specialized Interventions"
                        },
                        new
                        {
                            Id = new Guid("d98a1284-90c4-4f9c-8036-a903c35ebd9d"),
                            Name = "Preventive Interventions"
                        },
                        new
                        {
                            Id = new Guid("14db295e-cdd8-4595-9e65-9a87272ccc75"),
                            Name = "Oncological Interventions"
                        },
                        new
                        {
                            Id = new Guid("a86bfd5c-9767-4459-b79e-ad7451bc1b91"),
                            Name = "Postoperative Care"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("UserDetailsId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("UserBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("FirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("UserDetailsSoftDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Town");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsApplicationUser", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ApplicationUser");

                    b.HasKey("UserDetailsId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserDetailsApplicationUsers");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserDetailsId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PetId");

                    b.HasIndex("PetId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("UserDetailsPets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorInterventions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorPets")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetBookings")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetInterventions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany("UserBookings")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsApplicationUser", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany("UserDetailsPets")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorBookings");

                    b.Navigation("DoctorInterventions");

                    b.Navigation("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Navigation("PetBookings");

                    b.Navigation("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Navigation("UserBookings");

                    b.Navigation("UserDetailsPets");
                });
#pragma warning restore 612, 618
        }
    }
}
