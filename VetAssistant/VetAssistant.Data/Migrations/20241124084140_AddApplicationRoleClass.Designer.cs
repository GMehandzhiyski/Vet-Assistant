// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetAssistant.Data;

#nullable disable

namespace VetAssistant.Data.Migrations
{
    [DbContext(typeof(VetAssistantDbContext))]
    [Migration("20241124084140_AddApplicationRoleClass")]
    partial class AddApplicationRoleClass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingInterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicAddress");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicEmail");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("ClinicSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("ClinicName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ClinicPhone");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicTown");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicWorkingTime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("CountryISOCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c149f5d5-c7e8-40f1-a23a-c3f2a70372fa"),
                            Code = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = new Guid("a3f9fcd5-099a-4607-9e55-db13344dea14"),
                            Code = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = new Guid("2787853b-f140-46ac-bf4d-76be3ac8e548"),
                            Code = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = new Guid("c6746cb4-3a6d-4853-b821-0dbd16c3281d"),
                            Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = new Guid("cebf736f-753e-4be1-84e1-6339b3053397"),
                            Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = new Guid("65e5e8fd-4e76-4350-b51e-bc2089de20cd"),
                            Code = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = new Guid("fb568211-f859-4f1a-b347-8e37aa4b3389"),
                            Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("f42ad8f2-9e6b-4895-a2e8-30885e4cb702"),
                            Code = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("7699c5a7-ed3f-4d6e-a332-0895deee5f20"),
                            Code = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("7ea911e7-c014-4498-9b66-59ccbb3d0614"),
                            Code = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("393c20a1-3da7-465b-bb45-415782269a3f"),
                            Code = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = new Guid("61abaddf-740f-46f8-8ac8-22349b6c1d2d"),
                            Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = new Guid("3155a8f9-c3cb-4f22-81d7-eb04e9a4acc7"),
                            Code = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = new Guid("03644935-d5eb-41f5-a8b6-a7b07e87b4ce"),
                            Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = new Guid("01cef573-5550-43a9-939a-ded2da144751"),
                            Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = new Guid("38491666-5f78-4c6f-9d63-b1bbfe697620"),
                            Code = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("efc67e41-4278-41d2-9c54-e6cd0a5ced0a"),
                            Code = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("5d25d5d8-41f4-430a-b08e-9e886a692b13"),
                            Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = new Guid("36de787f-144d-49bc-beb8-3bbd3af890a1"),
                            Code = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = new Guid("60e183cc-fa05-4953-9270-03a3d7bae0ad"),
                            Code = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = new Guid("d32b2dbe-5954-4e14-af13-d832b47e3fd8"),
                            Code = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = new Guid("5670cbef-a156-4a95-ada2-b46a1ac32dd7"),
                            Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("2d61774a-9fff-41ba-822b-94b58b8d7ff0"),
                            Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = new Guid("0552cfb6-42f8-477c-ab82-7b8ed45fb9ec"),
                            Code = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("04798455-33c8-4d07-8116-9f278ee33f8c"),
                            Code = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = new Guid("0faa24dd-d392-4b1b-8909-19346516e1b1"),
                            Code = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("59d36546-3181-48c7-ad98-82f3c3af5651"),
                            Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = new Guid("c7ebddaa-1a59-44a2-830f-a73765f39375"),
                            Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = new Guid("d13a8daa-9254-4ff8-aaff-9f6da12abd73"),
                            Code = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = new Guid("29dcf16a-e276-4a72-884e-af02e82be6b3"),
                            Code = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = new Guid("723c4dab-44d0-4a6c-8f17-d758faf589db"),
                            Code = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = new Guid("b1b70c95-542c-43b5-8b8e-a5ffa96d9067"),
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("a8ec7061-6f7d-4a5a-9d91-781c61ff267a"),
                            Code = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = new Guid("d8eaf260-9709-423f-bd9f-cf09b8b90d36"),
                            Code = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = new Guid("6ce4de03-8379-472a-97fb-5da93436226f"),
                            Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = new Guid("c65908d4-1e9e-48b9-b8e9-637fa8e3585f"),
                            Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("026ec3d7-968f-4fab-a85b-bd4521a61e2b"),
                            Code = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = new Guid("0a8d89fe-bf60-4064-8c1a-cafbce95eb64"),
                            Code = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = new Guid("bc2dec1f-ad11-432d-a869-7ca37ffd4017"),
                            Code = "CG",
                            Name = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = new Guid("d8629c7f-f7a8-48cb-80fa-187e9c5192cc"),
                            Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = new Guid("32f693b2-0c10-4b7c-9058-22df425511cd"),
                            Code = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("d6110cab-18ff-4e79-9be1-4a52aa312f37"),
                            Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = new Guid("7b3623b7-687f-4b4f-bf49-cc92d7ac76a7"),
                            Code = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("7a9e3e20-baf2-4bfa-931a-d1abe4018f64"),
                            Code = "CZ",
                            Name = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = new Guid("52d853ac-f475-49f2-b75f-0c4a617aa73b"),
                            Code = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("3341b66d-25f9-43c0-9ba8-d15a67dd0816"),
                            Code = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = new Guid("02061133-8628-469b-8728-6ad718ab6b1b"),
                            Code = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = new Guid("f33e2a22-65eb-49e0-8073-c0afeea5618e"),
                            Code = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = new Guid("7445ce3f-66d9-4a05-a689-89ac6f13d2da"),
                            Code = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = new Guid("b8aaa387-e232-45ec-a5a9-979fd0168173"),
                            Code = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("589620c0-1b21-4a67-8b38-70f7f5c804ba"),
                            Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = new Guid("652fe846-c1a1-40ba-a8e6-1ed2c76b440d"),
                            Code = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = new Guid("2f4d001a-f0cc-4ae9-bf30-7a0307861dab"),
                            Code = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = new Guid("df2c90b2-24db-4198-96f4-01822ca31d4e"),
                            Code = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("b45c19b5-fc73-4c44-b503-52315d067a66"),
                            Code = "SZ",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = new Guid("8749ca77-a2f6-4706-be04-9f86fa9a25ee"),
                            Code = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = new Guid("8c4a24d3-179a-4bfc-832f-a678f02b6779"),
                            Code = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = new Guid("4d6c6a6a-1b6e-454b-bb6b-d5d9a173e07c"),
                            Code = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("649a900d-28e7-4caf-8e53-dd8b140b1982"),
                            Code = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("c790ff59-f30b-4b00-9820-9b767a70e56e"),
                            Code = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = new Guid("14983496-19f9-4a2a-8dfb-5561fbdbef32"),
                            Code = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = new Guid("b5e0db67-e58e-45bd-a9e2-d72eee0bea4f"),
                            Code = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("f49c02c2-a67c-4c46-a648-258a80582013"),
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("03190134-0ca2-48c4-817d-2527e20ef302"),
                            Code = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = new Guid("77667ac7-46cd-420d-9637-8844e2971b2a"),
                            Code = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("7f40afc2-1fcd-41e2-a1a7-726f8110c80d"),
                            Code = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = new Guid("4061d4a1-6ef2-418e-a479-8d06a030dfcd"),
                            Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = new Guid("d7c0e31f-5781-4dcf-937e-b6e06406ed31"),
                            Code = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = new Guid("d833e8b1-1178-44f1-b3f3-4f21a47335b2"),
                            Code = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = new Guid("c36c4577-b4cf-4b3d-91ef-187a54c6ac73"),
                            Code = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = new Guid("7eb333a1-6036-4473-99e5-ae59a9f4e292"),
                            Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = new Guid("2bce6aba-65d3-46e8-8ac2-bed5e363eeef"),
                            Code = "VA",
                            Name = "Holy See"
                        },
                        new
                        {
                            Id = new Guid("432b6d3f-9133-4a07-8ec0-e20090aae59f"),
                            Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = new Guid("5bdc4eb2-c095-4584-bc81-192c454915d5"),
                            Code = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("84bd8987-1146-4936-ab63-c7f188f65cd5"),
                            Code = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("892a9595-715a-4f94-9ec4-461e155e6512"),
                            Code = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("95d5e24f-baa0-493a-a54e-993498bf890c"),
                            Code = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("29cb927f-c3da-40aa-a686-60baf6d498ae"),
                            Code = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = new Guid("d4021159-4639-4827-9efb-811b5d3e18ee"),
                            Code = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = new Guid("b44275e1-f38b-4e0e-a761-6be77c27f490"),
                            Code = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("05ac6f3b-5a88-4046-8a27-a0511be80422"),
                            Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = new Guid("d98a0d2c-4cb7-4ad6-ac26-f1d55e57d2e3"),
                            Code = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("86da71f6-3946-49b3-8c52-0322458e38a0"),
                            Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = new Guid("266343f2-0522-4821-816a-257727391640"),
                            Code = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("d51f31f9-7041-4d69-8eb3-bdcee49a012b"),
                            Code = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = new Guid("83229b0c-2bf9-4fc5-a3fc-18ec3a52f9fa"),
                            Code = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = new Guid("53c71acc-acf0-4e57-9705-ec1bc7b35289"),
                            Code = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("5e130a0f-04a9-492d-a888-92a52c8cc6fc"),
                            Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = new Guid("70686f68-d37b-4b6e-94b7-7fdeb0221d5f"),
                            Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = new Guid("7a1ef78f-4d20-4e51-abe8-c005792139e1"),
                            Code = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = new Guid("ab4e52bb-0b5f-4939-ad44-bde5cf6ac20a"),
                            Code = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = new Guid("bde289c8-79bb-473f-b5ec-25dac7b15dff"),
                            Code = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("c19e37af-2191-4c98-80c1-c3a415fbe37f"),
                            Code = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = new Guid("0db43286-1bef-497b-af6e-078b0e8f8cfd"),
                            Code = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = new Guid("22c27354-579c-4f1a-bab5-cd464a14b603"),
                            Code = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = new Guid("864c908e-3843-4a06-8cff-a2b45ec65a5f"),
                            Code = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = new Guid("82899af7-6fa3-4ae4-a9d8-61d0c627fdf0"),
                            Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("25fe60ef-82b5-48ca-b6eb-a82de3f4f8e0"),
                            Code = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("974c1095-d608-4023-b67a-b8a69d3b33da"),
                            Code = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("00e0d82f-ab87-4f14-83c2-156b178c5466"),
                            Code = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = new Guid("10a7e5ce-3e7f-4920-99b0-5eb032fab4d7"),
                            Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = new Guid("76c5d225-face-4baf-93b3-ad5caa364c70"),
                            Code = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = new Guid("164702cb-19e7-4779-bf46-41334456f507"),
                            Code = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = new Guid("ce2247eb-fa56-4281-a0d8-62283b85829c"),
                            Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = new Guid("4d6f22d6-a2ac-4633-a12f-f6e367e130bf"),
                            Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("f7da7a0d-bd69-4620-9689-deaeaa979536"),
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = new Guid("6440ebd8-fd5c-4545-a318-0ce3d15f2fcf"),
                            Code = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = new Guid("0c33b2ba-341d-46c4-bb35-016d70355394"),
                            Code = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = new Guid("30677f57-e36d-4a16-8894-0badf9edc105"),
                            Code = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("67e82077-f9de-40e9-83c6-21cb95979c67"),
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = new Guid("b4847889-d61d-413d-bd1e-f2b665976a1a"),
                            Code = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = new Guid("b8bd1dcb-0618-4976-8a2f-23ca6234d966"),
                            Code = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = new Guid("0c68526f-4271-4492-a8ca-3d3c29187809"),
                            Code = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = new Guid("8b66211a-ff8e-4ff6-b548-40510fd0eb74"),
                            Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("d45f2e3a-05a7-4856-a021-a1f5ca5df1ef"),
                            Code = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = new Guid("8abf089b-632c-4d4a-ae59-35e4f2f1121b"),
                            Code = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = new Guid("39b7b5fb-832b-43c5-ae6a-bda3efdf7ab4"),
                            Code = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = new Guid("10a0d364-64f2-499a-be45-2ee86fb03417"),
                            Code = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = new Guid("39ed724f-9e15-4778-8eba-91c4d7ca3c6f"),
                            Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = new Guid("1623d687-16f0-42f7-977b-6752ab78dab2"),
                            Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = new Guid("9349e839-5b08-4ac1-af0a-20a6baf7cd17"),
                            Code = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("ab6de679-2750-4311-879e-9048ec7290de"),
                            Code = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("380a1383-9080-4d12-8103-838ccd59ba6e"),
                            Code = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = new Guid("f3337461-41e4-4ac7-b9b9-ad5ba690498b"),
                            Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = new Guid("266cc58f-ca18-4e17-8cba-8b56a6edb8a5"),
                            Code = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("06b5c5e0-406c-4168-b9d8-ae9bfa850eaa"),
                            Code = "KP",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = new Guid("c6b7e8ff-db42-4571-9a65-fad1e1f4f8d1"),
                            Code = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("5c5034c9-75b2-4a4d-bad5-c17f2338a426"),
                            Code = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("fac80439-741d-48a3-bb15-5429e6be6d6b"),
                            Code = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = new Guid("2a1dd80c-dace-49a5-830e-985fa024acfb"),
                            Code = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = new Guid("c6319546-e6c6-47a9-afa4-799d14695856"),
                            Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = new Guid("b8624994-c2c1-410a-97f8-1f5aa6d852ab"),
                            Code = "PS",
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = new Guid("38c754d2-fa58-4ace-aab7-f22e479c30fc"),
                            Code = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = new Guid("7db3575c-529f-4a14-b9a7-aad064e9469a"),
                            Code = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = new Guid("1c438d44-137a-4b16-bc25-80c15a3ba222"),
                            Code = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = new Guid("94435166-a163-4273-a168-51e5932b1c04"),
                            Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = new Guid("68a9bcd2-c8b6-4a08-9ccd-936fe3cfa588"),
                            Code = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = new Guid("5a73323b-8939-4065-9280-efc514e69435"),
                            Code = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("6826bdb0-110b-4a85-b39f-a64eae96e50a"),
                            Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("8120453e-4335-4367-a548-739bf4de91c9"),
                            Code = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = new Guid("70bae939-d198-48fc-bfc7-1fc048fb9cfc"),
                            Code = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = new Guid("028786ff-1cf5-4362-86e8-e3518d189de1"),
                            Code = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("69961121-4068-4fca-b409-099e9beaa22d"),
                            Code = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = new Guid("237fe580-dafd-4ade-aaaa-c7e5e8b5d90e"),
                            Code = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = new Guid("24b9a42b-fb64-4368-8b49-c8a308ebd267"),
                            Code = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = new Guid("a7f2c27a-ed4b-4e99-99b1-29fe7f2067ce"),
                            Code = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = new Guid("a6fecf9d-a819-438a-a6a8-b9bc7f792338"),
                            Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = new Guid("85ee71c3-125c-44b8-aadf-78d7e72edf19"),
                            Code = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = new Guid("cb1e0ccd-e8d7-46b5-a852-7a536b0723f7"),
                            Code = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = new Guid("9a4dc9ae-1dd0-4319-84b6-e625b095a672"),
                            Code = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = new Guid("a145c64d-7158-45c6-81a6-d65bf5411d58"),
                            Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = new Guid("3e7f9d2f-c7f1-46e5-a37d-e6162811a1f0"),
                            Code = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("b26a6742-6f94-4a9f-8a83-9623f510bf70"),
                            Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = new Guid("ace34969-e2fa-470f-9b8c-8237855a492b"),
                            Code = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("5e1384b4-bcf3-461c-b5ed-473771b4451b"),
                            Code = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("3176b62a-7b77-4964-a7d5-17bc3692652a"),
                            Code = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("01e6804b-b8f1-4755-b046-3ec1ee62b9ca"),
                            Code = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("f9545135-1782-4a2d-becc-8d3935b3582c"),
                            Code = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = new Guid("cd9e42e8-c88f-4366-8dac-85d46b54dafa"),
                            Code = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = new Guid("bdd42385-85f8-4c5f-9a91-dd75b5d3c125"),
                            Code = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("7307ac2e-202d-4e6e-a3af-f61c0d1890e1"),
                            Code = "KR",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("0879936a-ee84-41a4-9ce8-17e0f5f63f5c"),
                            Code = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = new Guid("50643888-a5d8-4d75-a6f4-fc81a3c7cc8e"),
                            Code = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("abe434bd-8d89-4baa-a766-5179b50acf63"),
                            Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = new Guid("edd0b0bb-1fb8-45e3-9945-48e9639c5bcd"),
                            Code = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = new Guid("4a776282-11f4-4886-aad0-2b2a88a55424"),
                            Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = new Guid("fb6e59f7-a6f8-4247-9da4-f828f05b2b8c"),
                            Code = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("d6669716-de93-49ee-b825-d5959d560dd5"),
                            Code = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("d6dc222b-5ab8-4190-803e-874bea7b14f1"),
                            Code = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = new Guid("df32b99d-652a-4333-9cc1-88abb887e58a"),
                            Code = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = new Guid("d8b59cf2-2ca0-4670-8d87-e8d39f8623cf"),
                            Code = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = new Guid("4f17db99-c19c-4380-9bd6-eab7ab466849"),
                            Code = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("e2c16e30-4c4d-4327-accd-8dbfe0cc5416"),
                            Code = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = new Guid("c24a4fd2-1da8-4dc7-8b22-91d3abfeb4e8"),
                            Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = new Guid("eecf4e56-2e28-44ed-807d-4e952683de24"),
                            Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = new Guid("15a46b12-0d39-4506-8b50-1e7fe9b6b607"),
                            Code = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = new Guid("1614d0b2-6e50-4f0e-807f-603fe39b0614"),
                            Code = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = new Guid("a7e5f23d-8ff1-44b0-82e7-16df19f5ea6b"),
                            Code = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("79e06fbe-2b5b-44dd-8e20-52f382767aab"),
                            Code = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = new Guid("2b93401a-cc43-4362-bf6f-e00580649bc5"),
                            Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = new Guid("aa60df93-4d28-4447-93ac-f5a929a3ead0"),
                            Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = new Guid("186e1719-6255-4ed0-81f6-34ae1daf3ef0"),
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("ea245c68-21b7-45b0-920d-d90448eff96c"),
                            Code = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = new Guid("dc2d5763-a3ba-4d41-af3d-bb654f322877"),
                            Code = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("7a7b2bfa-aa17-4c09-a369-0fdaeabc2654"),
                            Code = "US",
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = new Guid("2c1bed67-fbb8-4db1-8262-ceecc2f17e1d"),
                            Code = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = new Guid("e4732c46-1ee6-4741-a417-c2bed7555506"),
                            Code = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = new Guid("d613bb97-62a5-4e7f-8e28-d19b155fdb83"),
                            Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = new Guid("a2998a9b-a2e8-4da3-baf0-f2b7f52ca5b1"),
                            Code = "VA",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = new Guid("a1324a44-602d-4231-9061-5b1d14ee96a2"),
                            Code = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = new Guid("08c278a3-8f54-40af-82f6-026062ab9deb"),
                            Code = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("4b8b4b3b-c2cd-4dd9-b2b3-2a884b7cc3fe"),
                            Code = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = new Guid("cf27f5bb-e5ee-46d1-bd06-2fa2feb28cfd"),
                            Code = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = new Guid("cecfbd33-3f2c-4e45-abbb-c2fee80c5902"),
                            Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("DoctorDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorDetails");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorEducation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("DoctorEmailAddress");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorExperience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorFirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("DoctorImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("DoctorSoftDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorLastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PhoneNumber");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorSpecialty");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("DoctorTown");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("DoctorId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("DoctorBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("DoctorId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("DoctorInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.HasKey("DoctorId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetGenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("GenderName");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70c2cafe-d2e4-4f2c-a02d-0e10e94d57bd"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("3df41d49-f1eb-4d1c-bb65-ed05ced8def8"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<string>("DescriptionFromDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("DescriptionFromUSer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<bool>("IsInterventionDone")
                        .HasColumnType("bit")
                        .HasComment("InterventionStatus");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("PriceForIntervention");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetBreed");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("PetDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("PetAdditionalDetails");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("GenderId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("PetImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("PetSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PetName");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int")
                        .HasComment("PetNumberOfPassport");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetSpecies");

                    b.Property<string>("TransponderCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("PetTransponderAlphanumericCode");

                    b.Property<string>("TransponderLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetLocationOfTheTransponder");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Booking");

                    b.HasKey("PetId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("PetBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("PetId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.TypeIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeInspectionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("TypeInterventionName");

                    b.HasKey("Id");

                    b.ToTable("TypeInspections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("251df3a6-b909-4895-a567-69ee9e99a90d"),
                            Name = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("5f212a50-a046-4a7a-a2a8-b3cf11a427a3"),
                            Name = "Diagnostic Interventions"
                        },
                        new
                        {
                            Id = new Guid("a15af7e2-e8aa-4de2-bb1e-2a7208f30c93"),
                            Name = "Surgical Interventions"
                        },
                        new
                        {
                            Id = new Guid("66051e97-59bc-40d8-81c3-45df9bffd5af"),
                            Name = "Therapeutic Interventions"
                        },
                        new
                        {
                            Id = new Guid("184cf9df-18f1-45b0-95ab-be18a6038815"),
                            Name = "Dental Interventions"
                        },
                        new
                        {
                            Id = new Guid("c1b919fc-4ba3-4e3c-81ad-3eb4bcc52f9c"),
                            Name = "Obstetric and Reproductive Interventions"
                        },
                        new
                        {
                            Id = new Guid("3182af4d-9b38-4f52-953e-73b3f3cb192c"),
                            Name = "Exotic and Specialized Interventions"
                        },
                        new
                        {
                            Id = new Guid("04c95257-18aa-4833-a267-418acc41e13d"),
                            Name = "Preventive Interventions"
                        },
                        new
                        {
                            Id = new Guid("62d9e00e-7683-4a71-8735-8a38cc079c70"),
                            Name = "Oncological Interventions"
                        },
                        new
                        {
                            Id = new Guid("f65c6dd7-4fe7-4c84-8582-22be52de4625"),
                            Name = "Postoperative Care"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("UserDetailsId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("UserBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("FirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("UserDetailsSoftDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Town");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserDetailsId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PetId");

                    b.HasIndex("PetId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("UserDetailsPets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorInterventions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorPets")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetBookings")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetInterventions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany("UserBookings")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany("UserDetailsPets")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorBookings");

                    b.Navigation("DoctorInterventions");

                    b.Navigation("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Navigation("PetBookings");

                    b.Navigation("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Navigation("UserBookings");

                    b.Navigation("UserDetailsPets");
                });
#pragma warning restore 612, 618
        }
    }
}
