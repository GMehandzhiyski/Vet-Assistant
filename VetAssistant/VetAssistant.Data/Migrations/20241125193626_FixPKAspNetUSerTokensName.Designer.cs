// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetAssistant.Data;

#nullable disable

namespace VetAssistant.Data.Migrations
{
    [DbContext(typeof(VetAssistantDbContext))]
    [Migration("20241125193626_FixPKAspNetUSerTokensName")]
    partial class FixPKAspNetUSerTokensName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of create");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Delete");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("State of delete");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of modification");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of create");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Delete");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("First Name");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image Url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("State of delete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of modification");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Town");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUserBooking", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("UserDetailsId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("ApplicationUserBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUserPet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User Details Id");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Pet Id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PetId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PetId");

                    b.ToTable("ApplicationUserPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date Of Intervention");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deleting");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deleted status");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Pet Id");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Type Of Inspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User Id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Clinic Address");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deleting");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Clinic Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deleted status");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Clinic Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Clinic Phone");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Clinic Town");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Clinic Working Time");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Clinic Id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Id");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Country ISOCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Country Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afb321a0-104a-430c-8d04-8229cd1b2c37"),
                            Code = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = new Guid("11bb9590-1fd3-4e6a-8207-6454e8699cee"),
                            Code = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = new Guid("0a81506a-8151-4a6f-94bd-f9278874c359"),
                            Code = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = new Guid("083baef5-02e3-4e2d-9cdf-81145bb5dd93"),
                            Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = new Guid("e7cf5ca4-9761-48b9-854d-e651321b1800"),
                            Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = new Guid("9216ae0a-d5fe-4ffd-bf07-b6ec946c9311"),
                            Code = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = new Guid("267cbfa7-e2fb-4ae2-b4e7-f4aa50e9474a"),
                            Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("29d92fca-28c9-4388-9472-0b158e665151"),
                            Code = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("c618c91b-0bf3-4c83-a441-c30612a1ff45"),
                            Code = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("f7f1a0ba-26a5-4b9a-9d63-0cc503e8ea15"),
                            Code = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("afe4501b-fe64-4972-ae4b-a96bbb27bbdc"),
                            Code = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = new Guid("39fcd227-0c46-43c7-9225-6a6e3b1e29ff"),
                            Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = new Guid("625b8239-08f9-4042-a313-9fb53feb7497"),
                            Code = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = new Guid("f961c886-285a-45dc-9075-126b42430a37"),
                            Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = new Guid("0f2a2920-e8b9-45de-8d2c-0eda7fc4250f"),
                            Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = new Guid("c561c268-5d8c-4c41-b012-ccf5c77c7480"),
                            Code = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("7e5128cd-4402-4249-ae07-7c67f04aec8c"),
                            Code = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("efa94e59-478b-44f3-a734-8375cdcba2d0"),
                            Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = new Guid("f103ea61-4d30-466a-a2fc-bac628882cc9"),
                            Code = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = new Guid("5c6835ea-1abb-4bc8-9784-15e455baf15c"),
                            Code = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = new Guid("11136dac-5192-44fe-8e0e-5a23e1e675bb"),
                            Code = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = new Guid("e4f5b3b9-72f6-4377-8fe5-8a291a3f471b"),
                            Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("ee8ff7ef-f0c7-4e8f-a773-6639fc0c12eb"),
                            Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = new Guid("2d5dc601-6fc6-4fd8-bccc-6d0f01139ca4"),
                            Code = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("41e209e6-aac0-4052-a4c9-fd984058928b"),
                            Code = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = new Guid("9acffadc-aebf-49f8-a288-86627d7250dd"),
                            Code = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("ee815472-4cf1-4be4-bc47-6d28dbfb7cc7"),
                            Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = new Guid("395c73a3-cb5c-406c-aee7-604625983115"),
                            Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = new Guid("38b05e68-b23c-4020-844d-3f63e892a818"),
                            Code = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = new Guid("5e563a65-a7da-4e3c-81e2-22e81aae6acd"),
                            Code = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = new Guid("be9ecc93-29a2-41c2-8c1e-68599c35dc27"),
                            Code = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = new Guid("760b2979-0629-4cd2-bb4e-4ead88b0ce11"),
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("a62a2052-7684-4652-b98f-c4ebd45129f5"),
                            Code = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = new Guid("ce0c783d-7fa4-49d7-ab53-632631ebeb2b"),
                            Code = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = new Guid("5207caaf-bdde-4d2c-a7db-639ac1d31738"),
                            Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = new Guid("508b75b0-635f-492d-89cd-1223c3c93d01"),
                            Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("591e0e86-0a7b-4ce2-b640-05f3303d9e91"),
                            Code = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = new Guid("834a8c67-534b-46e8-b1c1-6697a640644f"),
                            Code = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = new Guid("bc63f682-bbaa-4198-ac12-c242d40ea61e"),
                            Code = "CG",
                            Name = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = new Guid("ac76b374-33ab-44ea-a4cc-1387cb7bfbfa"),
                            Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = new Guid("45e9cc61-7b79-4066-91d7-d44d2dc33705"),
                            Code = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("3d06e441-c199-497f-834c-ad0b50cb8b52"),
                            Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = new Guid("51cfab11-8ce5-44e6-85d1-641dc0e366a5"),
                            Code = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("cba128a6-10f5-4a44-9841-089e0db2bfbe"),
                            Code = "CZ",
                            Name = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = new Guid("f0c60ff6-dd4f-4fa1-9b6e-64cffcd14e0c"),
                            Code = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("8ccb37f7-0a9e-48d7-82e6-ea0dd27f3e45"),
                            Code = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = new Guid("dd2e0187-ea26-4e21-a8f1-f19911e71e54"),
                            Code = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = new Guid("69460549-27e5-4a9a-b34d-a82df835eb5f"),
                            Code = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = new Guid("69d8383b-1f5e-424f-96fd-cf6cedef1e3e"),
                            Code = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = new Guid("fd3a0b2d-39cb-4d1a-b5d0-3fa7d6592c0a"),
                            Code = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("08a393d5-88e9-4c86-b719-b299d903d527"),
                            Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = new Guid("4b355a84-5a47-4bbc-871b-7b7b862a4ae9"),
                            Code = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = new Guid("5f3a9293-b121-4749-be59-29c7c0074a4f"),
                            Code = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = new Guid("1be1cd04-4012-4002-9085-d9e376217b92"),
                            Code = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("c82a2276-3feb-4318-91bf-3e94a7786f8d"),
                            Code = "SZ",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = new Guid("14cab769-cd51-4633-a33e-6da6f91424c7"),
                            Code = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = new Guid("bbf928a3-6d5e-49f6-89c9-498a446ed8ad"),
                            Code = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = new Guid("4183af72-8dc8-4330-8b67-cba69d581d4e"),
                            Code = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("0404a25e-e0a5-4359-9ae5-a6fb8b6543a3"),
                            Code = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("8c7f7064-9709-41b9-98de-661f5f42ec9d"),
                            Code = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = new Guid("54541919-3acc-4474-9198-963d86c684f7"),
                            Code = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = new Guid("86858cfc-2fa3-46d7-a020-6042bef3b1dd"),
                            Code = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("c9e4baf7-79cb-4834-ae1a-7ad8e448a345"),
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("79d36b85-3231-45fe-b164-0e1f2ea96847"),
                            Code = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = new Guid("08387237-f277-416e-a65f-e33ed32ca559"),
                            Code = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("5589f146-e6bc-4665-8ab0-7b6998f47990"),
                            Code = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = new Guid("6b714d2b-087b-4811-8a15-a355cddeb420"),
                            Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = new Guid("d7360e6b-a5cc-41fb-93df-55b479cf14a3"),
                            Code = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = new Guid("ad719300-a00e-47d4-9a97-a966f173e8ae"),
                            Code = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = new Guid("e4c0218f-8dd7-4f3c-8a46-da86ac67e556"),
                            Code = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = new Guid("0d1d257e-bbfd-48f8-a0ae-1da228da4926"),
                            Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = new Guid("35e80f33-f305-4c4a-9292-27b3a70a6df3"),
                            Code = "VA",
                            Name = "Holy See"
                        },
                        new
                        {
                            Id = new Guid("a18f7eac-2cbc-42c5-b83e-8e0b69841d09"),
                            Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = new Guid("d48f2b07-474c-4395-aa7c-15cc90b83c40"),
                            Code = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("3193b259-231e-405f-9574-afead062f051"),
                            Code = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("becca01f-40fd-4aab-8e47-3b4f70b47a4c"),
                            Code = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("c4cb78ef-52f4-4c4e-b718-8c5796baf286"),
                            Code = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("9d77a24a-3aa4-45ff-a7a3-6a99348dda1c"),
                            Code = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = new Guid("15cc8e35-4665-461d-9116-0921b0684a0c"),
                            Code = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = new Guid("c3121554-cb2b-4568-b5d4-b2bf69d9ce38"),
                            Code = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("f610c6ce-2f55-4d26-826a-cdee69d99f73"),
                            Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = new Guid("9f11e9e9-8ca9-4d85-bace-d326e1a10859"),
                            Code = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("f5f16004-9e4d-4e7f-a20e-36944b095178"),
                            Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = new Guid("519380f3-a782-4bf7-9c61-6cb8abe42bd4"),
                            Code = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("7b8d9b0e-7133-4dcd-929d-433687adf37f"),
                            Code = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = new Guid("a61cbac3-c83d-4eab-b688-5eaeeeb05038"),
                            Code = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = new Guid("4fe72aed-f79a-4bff-a5ba-39318b555736"),
                            Code = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("88dce617-5b0b-4d7c-85d1-d0c993413aee"),
                            Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = new Guid("3f443bcf-b64c-4038-a6d5-c40c76cc3096"),
                            Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = new Guid("5917f331-1899-4716-a196-fe0e1e71e699"),
                            Code = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = new Guid("15a55290-afcd-400d-9034-39318ce6b585"),
                            Code = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = new Guid("d127646e-77c2-4926-bcf6-5a7d2f46a096"),
                            Code = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("1bd3f517-28dc-45ea-8b13-44e10ca6350a"),
                            Code = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = new Guid("55777e45-4294-4787-bf84-761a575ae1b4"),
                            Code = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = new Guid("3d3cd049-f419-4bc7-83db-8e89f219660f"),
                            Code = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = new Guid("aa9593e1-0895-4847-85ba-418ff7cd81b0"),
                            Code = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = new Guid("3d9b167e-8ad0-4b83-8303-fc36a73848e5"),
                            Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("46c302af-df44-49db-8ab5-0af61691b41a"),
                            Code = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("e6f2cb10-4987-4f1c-973c-9fd3fe6f9f46"),
                            Code = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("af80b62a-9b51-4310-bea3-24e206ae0435"),
                            Code = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = new Guid("23417357-ae16-4d64-9dde-796744ac9b57"),
                            Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = new Guid("6f09bcce-3ec9-4315-9de8-10a0bec8ed6a"),
                            Code = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = new Guid("5663fb40-1b8d-4350-932e-3bb57ac2001e"),
                            Code = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = new Guid("041ef411-f6c9-4bf4-a7e8-37092ba4f196"),
                            Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = new Guid("5859a620-e7db-487d-9e7b-adce4c7d0c43"),
                            Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("7df0f11a-68c4-4e67-b548-fbb379a16d52"),
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = new Guid("c10245c5-63f6-4b42-9a91-4b3ce7b4bea0"),
                            Code = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = new Guid("6dccb638-06e8-458a-81b8-e1edb9b5accd"),
                            Code = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = new Guid("d32bb6c6-d00e-43ed-9f4c-f80dd0811243"),
                            Code = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("23871065-e693-470b-9c3d-6863aee4a563"),
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = new Guid("abf03933-1dac-4c95-873e-bd945b76e7a2"),
                            Code = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = new Guid("afb19788-ff05-45be-81b2-67d999726af9"),
                            Code = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = new Guid("ed353fd6-6b4c-482d-9a1b-8d586c118aa1"),
                            Code = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = new Guid("468ad825-9dbf-4063-b602-305613ded725"),
                            Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("39a3ff36-1cbf-4596-9812-9fc9fb652d14"),
                            Code = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = new Guid("37b3e1a6-3b01-4c85-ac10-ef7e1e4bcf50"),
                            Code = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = new Guid("dd36f82c-c9de-43b6-9fdc-0c22fbb0685d"),
                            Code = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = new Guid("f59095d3-e745-4ea8-bac9-41332e1c2518"),
                            Code = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = new Guid("ebf82b0d-dee8-4da6-ae6e-e50987b7083e"),
                            Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = new Guid("3bb346a8-4501-4dee-90dc-aa4884f9628d"),
                            Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = new Guid("fb26826b-b639-4a0b-a541-700908884feb"),
                            Code = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("2dbcad05-2e8c-4703-8d1a-76493cbd4518"),
                            Code = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("555e1477-f618-408c-a3da-2727b23c1354"),
                            Code = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = new Guid("7dde3ec9-3a00-4ff4-8023-bae42e5b3270"),
                            Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = new Guid("28f66103-5eb8-40be-9358-25ec3df243bf"),
                            Code = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("2716b7c6-7078-4ab4-bd91-59f4c635957e"),
                            Code = "KP",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = new Guid("44ebd5d2-c94c-4f22-bc48-ff23a9d5786c"),
                            Code = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("607e9b41-9ae4-4b84-b704-5e60fdb2fea2"),
                            Code = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("ead03201-e794-4181-bf67-2a3d3ddf4b06"),
                            Code = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = new Guid("2e4d88bd-2ac7-4027-90a6-aae572aeb0d0"),
                            Code = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = new Guid("13386d82-db16-45fd-a56b-18a507aec2eb"),
                            Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = new Guid("9f53a74d-f0d9-4fb3-92d0-913518073dfe"),
                            Code = "PS",
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = new Guid("455c3ba3-1d1f-41a8-94a0-4735e098dac5"),
                            Code = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = new Guid("34a4617d-ccae-4092-9489-6a07effa3f9a"),
                            Code = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = new Guid("098c65c6-ff05-401c-a118-4ab8f660532d"),
                            Code = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = new Guid("2cc4f4dc-589d-41bc-90c5-e2c174980638"),
                            Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = new Guid("0e4096fd-6d6c-4b7e-a2c5-2258b1b71b43"),
                            Code = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = new Guid("0ea0afdd-4923-472a-91ec-57c088b42820"),
                            Code = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("af5040c6-b0c8-4ffc-b6ae-8973081973f6"),
                            Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("b15ff395-a74d-43b9-8c41-2aa80d1a26a0"),
                            Code = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = new Guid("eee3efe7-3dee-446a-8990-51cac30b3adc"),
                            Code = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = new Guid("552b0890-09e6-4273-8235-14664b14203c"),
                            Code = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("3afcf2db-319d-46dc-b51b-5d2e8fa5ded9"),
                            Code = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = new Guid("a3afb3e7-3a40-4ac1-ac30-a6d59a2583e5"),
                            Code = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = new Guid("99bc4a04-48b4-47d6-aa24-69145540a966"),
                            Code = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = new Guid("f9a62088-522e-41d6-8718-3a25fcc87d5a"),
                            Code = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = new Guid("6e43d68e-c8d2-4eda-b6a2-086d4a600f3b"),
                            Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = new Guid("56ad245c-c9fc-4e9b-a8e2-b9543f04ba8a"),
                            Code = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = new Guid("048eacd6-0060-43c0-94e6-0f43e083a275"),
                            Code = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = new Guid("9ecb67ba-348e-4ce1-a9a0-8788cf14de38"),
                            Code = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = new Guid("17a337f1-cf87-415e-839e-7c5c1fd9f570"),
                            Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = new Guid("8eaaafd8-37bb-447f-8452-627b010746c9"),
                            Code = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("9d7e1e56-32b7-4b6b-9b0d-9c852b033ae3"),
                            Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = new Guid("1d976ed9-56d0-4582-a014-995e31ef9a30"),
                            Code = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("83809627-c3ac-43af-9627-1b9289ed43c7"),
                            Code = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("7e33a9cb-7a48-4ada-abf8-856ae6e67a13"),
                            Code = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("d571258c-3b62-4b28-8ad7-f66fd1c6b04a"),
                            Code = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("cbaf255b-72ba-4d94-9adb-76fc53b95713"),
                            Code = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = new Guid("78766611-994a-4a2a-96b1-76598ecc27ce"),
                            Code = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = new Guid("0381594e-a3e6-45aa-9914-7e99c9377bda"),
                            Code = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("1ed03bd4-8aa1-44e7-81e0-a6263d6c4887"),
                            Code = "KR",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("926fba51-dc5e-4166-b0be-f6686fc11b89"),
                            Code = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = new Guid("f9e12bef-4ec5-4b92-9dd3-291231cda9af"),
                            Code = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("479a8cf9-d7c2-486e-9c86-f9aec36a4669"),
                            Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = new Guid("412b2f1b-f78c-4424-8d44-5552c0084d53"),
                            Code = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = new Guid("a1677fea-8d0a-41e5-854e-3602aaf5555b"),
                            Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = new Guid("e9164e09-cc31-4cfd-8d44-c1392dfbc615"),
                            Code = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("b3ca8b9d-577a-400c-bbc0-a15ee9dd10a3"),
                            Code = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("5aca1927-d299-4fcb-8701-c7ce9ed3e538"),
                            Code = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = new Guid("df3353ba-815d-486e-b812-a06113b5a6a5"),
                            Code = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = new Guid("a195f224-e376-49f1-8cb6-a2b3076479e7"),
                            Code = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = new Guid("af91e09b-7ff3-4c91-9419-e9d455197658"),
                            Code = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("657b4f9c-21a9-4b47-b399-409da8083ba4"),
                            Code = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = new Guid("c316753d-8615-4544-acfc-3828ec1937e3"),
                            Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = new Guid("9b380558-5c45-44bc-b8ed-1c8335d59e9e"),
                            Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = new Guid("fd39fa10-fd48-46b3-a0e6-99a97272e2b8"),
                            Code = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = new Guid("429f5304-de3c-42e2-b50c-b183b170a60a"),
                            Code = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = new Guid("7efb312c-651e-4687-9010-1f4e6e4b07da"),
                            Code = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("bda4c52a-06f3-42ff-9b47-db5618043f86"),
                            Code = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = new Guid("ca97e98f-f981-4886-bda6-acf85c4c3d5d"),
                            Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = new Guid("f44b4157-9b8d-40bc-adde-3c7f675b4653"),
                            Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = new Guid("23aeae8c-bb18-47cb-840a-e11f28e996aa"),
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("6978db6b-be9c-46ab-bc2f-2aacabfec0c7"),
                            Code = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = new Guid("806bce63-c727-43bb-8db0-74397d94ec46"),
                            Code = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("c6992081-eda1-4fc3-ab70-d194cf5c4e50"),
                            Code = "US",
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = new Guid("c7153d47-9e0e-4e1e-9bdf-a24465d69fb1"),
                            Code = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = new Guid("be9501f4-81df-4912-b548-16ced68aa88a"),
                            Code = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = new Guid("70e2884b-de79-4892-a340-fa8fb0cbb859"),
                            Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = new Guid("d610b74b-fc00-49ef-9504-9710be73f1a2"),
                            Code = "VA",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = new Guid("42bacdda-4a50-4629-be68-c166c4aa88b7"),
                            Code = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = new Guid("17e1d03c-2fc5-4b05-a160-d01de7689b01"),
                            Code = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("271e8de4-b62f-48b6-835d-7de4bf92473f"),
                            Code = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = new Guid("561689ff-6df3-4fd1-8ba2-870c56aa6a46"),
                            Code = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = new Guid("00a99495-e8bc-4172-b911-ba42617bb983"),
                            Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Doctor Date Of Birth");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deleting");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Doctor Details");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Doctor Education");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor Email Address");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Doctor Experience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Doctor First Name");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Doctor Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deleted status");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Doctor Last Name");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phone Number");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Doctor Specialty");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Doctor Town");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBooking", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Booking Id");

                    b.HasKey("DoctorId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("DoctorBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Id");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Intervention Id");

                    b.HasKey("DoctorId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("DoctorInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Id");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.HasKey("DoctorId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Pet Gender Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Gender Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("480e0cc3-73d0-4b07-bde8-adfd6f804ae6"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("91afed81-19a3-4a16-b500-d50e76c8e0e6"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date Of Intervention");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deleting");

                    b.Property<string>("DescriptionFromDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("DescriptionFromUSer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deleted status");

                    b.Property<bool>("IsInterventionDone")
                        .HasColumnType("bit")
                        .HasComment("Intervention Status");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Pet Id");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Price For Intervention");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Type Of Inspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User Id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Pet Breed");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("PetDate Of Birth");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of deleting");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Pet Additional Details");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gender Id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pet Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Deleted status");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Pet Name");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int")
                        .HasComment("PetNumber Of Passport");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Pet Species");

                    b.Property<string>("TransponderCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Pet Transponder Alphanumeric Code");

                    b.Property<string>("TransponderLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Pet Location Of The Transponder");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBooking", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Booking");

                    b.HasKey("PetId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("PetBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Pet Id");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Intervention Id");

                    b.HasKey("PetId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.TypeIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Type Inspection Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Type Intervention Name");

                    b.HasKey("Id");

                    b.ToTable("TypeInspections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e1cc096-e4c7-4f7f-9dac-0185028d7b94"),
                            Name = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("614ea707-a330-4ced-bc1b-c07f1009f0cd"),
                            Name = "Diagnostic Interventions"
                        },
                        new
                        {
                            Id = new Guid("f03d96b1-3559-4ebc-9c13-2c8ed4fe8b71"),
                            Name = "Surgical Interventions"
                        },
                        new
                        {
                            Id = new Guid("3752d83c-c6be-4203-93f8-6bfe47050392"),
                            Name = "Therapeutic Interventions"
                        },
                        new
                        {
                            Id = new Guid("52f2b1e4-bb34-448f-a598-6ed291c89480"),
                            Name = "Dental Interventions"
                        },
                        new
                        {
                            Id = new Guid("ce82aaae-cdb0-40a4-b5cd-dd04265d4f06"),
                            Name = "Obstetric and Reproductive Interventions"
                        },
                        new
                        {
                            Id = new Guid("27b09e44-f1c9-4d98-99f1-fef1234a1673"),
                            Name = "Exotic and Specialized Interventions"
                        },
                        new
                        {
                            Id = new Guid("ed58be4a-d108-4fd2-bfc0-6b6446004085"),
                            Name = "Preventive Interventions"
                        },
                        new
                        {
                            Id = new Guid("213cbba6-4e73-492f-b023-7e7553eeb348"),
                            Name = "Oncological Interventions"
                        },
                        new
                        {
                            Id = new Guid("a23c2fcb-1a30-4ed3-8d80-396723abf50f"),
                            Name = "Postoperative Care"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUserBooking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserBookings")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUserPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserDetailsPets")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBooking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorInterventions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorPets")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBooking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetBookings")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetInterventions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserBookings");

                    b.Navigation("UserDetailsPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorBookings");

                    b.Navigation("DoctorInterventions");

                    b.Navigation("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Navigation("PetBookings");

                    b.Navigation("PetInterventions");
                });
#pragma warning restore 612, 618
        }
    }
}
