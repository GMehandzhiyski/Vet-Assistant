// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetAssistant.Data;

#nullable disable

namespace VetAssistant.Data.Migrations
{
    [DbContext(typeof(VetAssistantDbContext))]
    [Migration("20241116073436_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingInterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicAddress");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicEmail");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("ClinicSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("ClinicName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("ClinicPhone");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("ClinicTown");

                    b.Property<string>("WorkingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("ClinicWorkingTime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ClinicId");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.HasKey("ClinicId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("CountryISOCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("CountryName");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56fa0021-2705-4d0f-9a42-e023bc17f1dc"),
                            Code = "AF",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = new Guid("f2588ea3-a2a1-4150-8a19-72e9f1fdf257"),
                            Code = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = new Guid("15f0b79b-7351-458b-8018-248f840d6b20"),
                            Code = "DZ",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = new Guid("c646aafc-92b7-4c87-8a82-2b2cc4802d4d"),
                            Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = new Guid("993bc1c5-5b5e-4fc1-8feb-62e10639ff55"),
                            Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = new Guid("08e0537c-ccc2-4e36-9321-6f078604d6a3"),
                            Code = "AG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = new Guid("d54e44bf-36d8-41b2-a840-e11e86866a0c"),
                            Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = new Guid("3d30826c-9f76-4413-8f41-f5e7535e0788"),
                            Code = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("4d33bc44-339c-4d43-a1ce-ed4758ee9952"),
                            Code = "AU",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = new Guid("3533679b-0701-4458-bbae-bb406c83f750"),
                            Code = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = new Guid("09443c03-1667-43d2-8ace-7ccd963bd5ae"),
                            Code = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = new Guid("6289d8a0-3124-4b7e-bcca-6ec8b5862077"),
                            Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = new Guid("35f7577f-33e3-4599-a03d-bb590a2e4bd4"),
                            Code = "BH",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = new Guid("195c9e25-11ba-47a4-8715-2b2dd1d9057d"),
                            Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = new Guid("1174a7f1-3c74-4c66-a688-095507beefe4"),
                            Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = new Guid("cbdc3d74-3c53-47a0-b23e-0bffd0f6f136"),
                            Code = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("e4240aa2-69d2-4c8a-86c2-a280fd34073a"),
                            Code = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("af6c4409-05ed-4151-8c52-875ec9ee536a"),
                            Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = new Guid("595242fa-81fb-4bb2-a19c-11c1e519c569"),
                            Code = "BJ",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = new Guid("8a2c647f-f216-4937-b75b-6d1355653da0"),
                            Code = "BT",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = new Guid("88198bb5-c784-4287-9a04-22f55d04c972"),
                            Code = "BO",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = new Guid("4e5e1e62-cf1a-4501-b632-fdbf69f79237"),
                            Code = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("88be5c0c-951d-4b3a-8d30-1c9e3d2da037"),
                            Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = new Guid("e28aac77-6178-4084-9b53-95c66a7b3a31"),
                            Code = "BR",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("02657e8f-69ba-4297-8232-dd719597f651"),
                            Code = "BN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = new Guid("138f5c4e-fbd5-4dde-8ff3-0a54883a0f25"),
                            Code = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("62dbd864-1bbc-46de-8165-39dd0e80d8b9"),
                            Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = new Guid("481dfe3a-42f1-4137-9e61-f2b4b52e910c"),
                            Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = new Guid("d1003ea4-cd8e-4803-9b72-5bd73b12d0da"),
                            Code = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = new Guid("ce97869e-9028-499a-be98-da7cf21fe595"),
                            Code = "KH",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = new Guid("474017da-9b99-45cd-aa30-a45b0c402391"),
                            Code = "CM",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = new Guid("859b5b1a-72f0-415c-a320-fb29ffc0d359"),
                            Code = "CA",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = new Guid("a1cd49bd-8f3a-4a11-8295-75565ddde180"),
                            Code = "CF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = new Guid("79bff4d1-b663-4ac6-b4ac-bfe0a61072df"),
                            Code = "TD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = new Guid("cd6cd2c3-0493-45a7-9a96-74ba21762f4c"),
                            Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = new Guid("47356710-4eaf-4c44-adbf-de9b29d32d74"),
                            Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = new Guid("09bec1cd-a208-4008-81a6-5ebede87dd70"),
                            Code = "CO",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = new Guid("a270f2e7-e19f-4834-bf8e-01a3df8ad7ff"),
                            Code = "KM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = new Guid("fbf6252c-9c16-47ce-a481-e9f9f2995052"),
                            Code = "CG",
                            Name = "Congo (Congo-Brazzaville)"
                        },
                        new
                        {
                            Id = new Guid("6b58ff3a-3fcd-4df5-a59a-e0c65def2a15"),
                            Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = new Guid("b084608e-df46-4f0d-a9db-53a8e683ba4b"),
                            Code = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = new Guid("ca2ad41f-65a5-46d8-9264-d50223e9ca52"),
                            Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = new Guid("6da882f3-942e-4cc3-b8bb-683b60d34c05"),
                            Code = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = new Guid("803b140c-01d1-4fbb-8aab-90203392bdee"),
                            Code = "CZ",
                            Name = "Czechia (Czech Republic)"
                        },
                        new
                        {
                            Id = new Guid("a356a2e6-6946-430d-9455-082d3b69854d"),
                            Code = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("fe431ce5-ff9b-4346-b37a-f21387a4730a"),
                            Code = "DJ",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = new Guid("4a778691-816e-443b-ae5c-84a7c5e747d9"),
                            Code = "DM",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = new Guid("698519ce-9675-490a-8172-5c08844a03f4"),
                            Code = "DO",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = new Guid("4a752a83-07dc-4fc7-b33a-11c6c3e9011a"),
                            Code = "EC",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = new Guid("ad87c332-e7cb-4bc1-8356-21d5a68e98b4"),
                            Code = "EG",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = new Guid("1ced3173-937e-4a2b-8a21-24e3e6246608"),
                            Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = new Guid("dd7069ef-5c40-4096-9e74-faae8c169c45"),
                            Code = "GQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = new Guid("3c63a9f6-bfb3-4873-baac-f548716b5a39"),
                            Code = "ER",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = new Guid("2b4a3835-0961-4249-ae12-1180d323af14"),
                            Code = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = new Guid("8b6611b6-2411-4d64-bd1d-bdf9adc56f96"),
                            Code = "SZ",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = new Guid("7130107a-2f1b-4150-91ca-d37e6573fc0d"),
                            Code = "ET",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = new Guid("b23a87bc-24f6-49c9-8a9a-12a64bc371ca"),
                            Code = "FJ",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = new Guid("72217836-88e6-45f0-9d29-aca4b18669e8"),
                            Code = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = new Guid("2eb2fb7d-882f-47f6-b2b3-3c889af48db5"),
                            Code = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = new Guid("1bf7ea6a-fccb-4341-b8ce-ee107981e426"),
                            Code = "GA",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = new Guid("109a80af-df4a-4971-a9ce-36179f3141da"),
                            Code = "GM",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = new Guid("df8add1e-5f61-4b11-9cd6-d2eff51d5226"),
                            Code = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = new Guid("545ab6c5-0930-4099-8f1f-bf5e52fa0274"),
                            Code = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("3c932ed6-6c6c-4fe1-8fb4-c5decb18e148"),
                            Code = "GH",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = new Guid("d542f409-898c-4d4e-b85c-505429cae765"),
                            Code = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("b60b78f8-8fd5-43df-b49a-c6310919057d"),
                            Code = "GD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = new Guid("1c3979f7-f48d-45e2-9594-ffc259ead5f8"),
                            Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = new Guid("ca1dbe9a-647b-4839-9e4b-87482924ccc0"),
                            Code = "GN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = new Guid("3634b41f-75c5-411e-af59-64a3bff4264d"),
                            Code = "GW",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = new Guid("97b89d32-bcdc-4d27-9cbc-2ff7bd98d5cb"),
                            Code = "GY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = new Guid("49d74ef7-1452-4e5e-a8d5-6a45b0c3b37a"),
                            Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = new Guid("741023dc-8f1b-41f8-b042-df41369ebbd4"),
                            Code = "VA",
                            Name = "Holy See"
                        },
                        new
                        {
                            Id = new Guid("e99e6c9e-1fd8-4e26-ac96-045b610abd56"),
                            Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = new Guid("3dba0def-99f8-42a6-8e40-fa007feca127"),
                            Code = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = new Guid("37563ff2-0e3a-4648-971e-1614b4d6df1f"),
                            Code = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = new Guid("1529e974-589d-43d7-91f3-21a842cd49bc"),
                            Code = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("4221a12d-4c7d-4545-ae25-b836c8f0b0bc"),
                            Code = "ID",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("75433732-362f-4b3e-bb2a-d8bdadceb961"),
                            Code = "IR",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = new Guid("f5e3c239-b365-4008-b9fc-3e2fdecb947c"),
                            Code = "IQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = new Guid("629a5ca5-cb4d-44e6-b04b-875d69b865d4"),
                            Code = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = new Guid("a6793ce0-0c37-48f1-ae93-fb8e57eaf4d5"),
                            Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = new Guid("3765d8e4-8267-4621-9aec-c249b54aa646"),
                            Code = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = new Guid("69db1776-b799-47de-a75f-aed055ad892a"),
                            Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = new Guid("148bd731-2c0d-4d59-a3e7-71cb6300b944"),
                            Code = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("3d38ce12-ba82-44c1-9389-e2a29455c8bb"),
                            Code = "JO",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = new Guid("db7d67a1-2b35-41b7-95aa-6f7f8ac1f13c"),
                            Code = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = new Guid("eabdf0f2-0f7a-44fa-bc3b-7b71e7c8be0f"),
                            Code = "KE",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = new Guid("82c49a83-3e1e-4ebf-9445-2a8496321b87"),
                            Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = new Guid("8880278e-b051-49f2-8c78-bd73ea610e2d"),
                            Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = new Guid("0a686465-af16-4ea4-9420-df710fe2302d"),
                            Code = "KG",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = new Guid("0b13a496-93b2-408d-b97c-db0ca5dc9f40"),
                            Code = "LA",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = new Guid("d5ca7c77-1232-4f01-ada4-a30feabab9bb"),
                            Code = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = new Guid("41398e89-d1a5-4a7c-b715-b7f257fa37ba"),
                            Code = "LB",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = new Guid("f0e3d6db-05bb-41ca-b31b-d7d1eede6e34"),
                            Code = "LS",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = new Guid("dc95c988-3281-4af6-8c3f-9b81a6c9ed57"),
                            Code = "LR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = new Guid("6400d6e4-c582-4b84-b4d5-55eb25666144"),
                            Code = "LY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = new Guid("69d3138a-1141-4e60-ab1a-6192f1ed4240"),
                            Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = new Guid("2cd0fa17-f971-4568-b7fb-42e41920d494"),
                            Code = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = new Guid("a033aa47-fbf5-45da-9367-ea06ef348c62"),
                            Code = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = new Guid("e16574fc-036d-44a0-a9cd-24e8535e6f27"),
                            Code = "MG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = new Guid("02451861-d3f0-4911-b24e-835fc3e6982e"),
                            Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = new Guid("430666fe-5763-4b9f-bdab-78d71348b37a"),
                            Code = "MY",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = new Guid("174c9ef4-e7ab-4d08-b0d8-c55ffe9e47a3"),
                            Code = "MV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = new Guid("16605065-7181-4cfe-983e-b51f2c02487d"),
                            Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = new Guid("14741fee-eefc-4faa-8ed0-d84b43fa7ceb"),
                            Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = new Guid("6d2c10cf-db7a-45d2-bf72-88762ea205b9"),
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = new Guid("f695f193-b12f-49df-991c-6bd2a99ff9f7"),
                            Code = "MR",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = new Guid("ee106a15-79bf-4e55-bb1b-8797880b6a4a"),
                            Code = "MU",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = new Guid("b0b1a7f1-9a11-489b-84a3-7d215ffde813"),
                            Code = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = new Guid("fefb7c79-6b2f-4596-a551-d4737bc6d2f2"),
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = new Guid("3ef879a9-1ff0-474d-b9f1-df8a2f385d8c"),
                            Code = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = new Guid("164865ed-98fb-44f6-b1d6-003ad08ed1a2"),
                            Code = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = new Guid("b4805d94-50b2-466e-8455-d234d498b0c2"),
                            Code = "MN",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = new Guid("b4f01db7-676b-4ce1-a06a-0bd67a8ad6de"),
                            Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = new Guid("a8d132f4-49b7-4392-a36b-93be299a5240"),
                            Code = "MA",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = new Guid("3ba7ca05-4e93-49e4-a6b5-1d954e144650"),
                            Code = "MZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = new Guid("1a3d210c-3e54-4905-85f9-8566132c493c"),
                            Code = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = new Guid("7191c31e-14c8-41f2-9454-7cfd48691dca"),
                            Code = "NA",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = new Guid("953249fc-17ae-4eb7-80f7-98a9b56dfab5"),
                            Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = new Guid("30fe27c5-a2e0-4439-9d4f-54063f7d29e1"),
                            Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = new Guid("6ae8ed11-5dea-4af5-978d-547133cb704d"),
                            Code = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = new Guid("56b1e71d-a6a9-4250-9768-09a218f7441b"),
                            Code = "NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = new Guid("b4610657-f449-4bf7-9c8a-284221c2af41"),
                            Code = "NI",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = new Guid("16a8bb9f-a780-454a-80ee-fc09e3f1e337"),
                            Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = new Guid("da938431-1bbb-4358-a880-6792a297902d"),
                            Code = "NG",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = new Guid("8f1d0024-9d78-452a-b741-21add21cde86"),
                            Code = "KP",
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = new Guid("d881e8ad-e603-4fbb-ac69-638ac6770345"),
                            Code = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = new Guid("6bb7a5e2-6708-4d55-ac62-f5b614fc3000"),
                            Code = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = new Guid("637faf45-0512-408a-ba2f-ac832750f87b"),
                            Code = "OM",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = new Guid("5f03d52d-0372-4c5d-a3c3-2e06df6a8a07"),
                            Code = "PK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = new Guid("92f3b7e5-d874-49b7-922d-6b6e00b683b0"),
                            Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = new Guid("3290885f-b68e-4436-96cb-9b3cccdf4e53"),
                            Code = "PS",
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = new Guid("cb7f88d0-570b-4bcf-aa72-b7452c010b60"),
                            Code = "PA",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = new Guid("222814eb-b5a1-4226-beb4-52d61baf931e"),
                            Code = "PG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = new Guid("de7f363f-123f-4a08-9b97-e7216bbe4358"),
                            Code = "PY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = new Guid("deebdfce-ea25-4d5a-a50f-d188dfcb05c4"),
                            Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = new Guid("e1361f53-1791-434c-85ca-2c1fea1ef282"),
                            Code = "PH",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = new Guid("34df2be5-a0f0-4281-a7f3-38488d20c870"),
                            Code = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("3ec191ce-4f89-45f0-b0e9-3095d66bb32f"),
                            Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("8f6ea078-d5f0-4a8d-b0f3-3ddabfe59b9e"),
                            Code = "QA",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = new Guid("8857d6e9-a70e-488c-a471-3eed0ad6968e"),
                            Code = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = new Guid("bb8be9b3-db6a-4fb5-a712-6b5d1de762f1"),
                            Code = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = new Guid("bc665db1-9164-46f7-b453-b89779fb3f26"),
                            Code = "RW",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = new Guid("35cad6a5-0e66-4a14-8b21-c584bd64612b"),
                            Code = "KN",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = new Guid("d0356873-685f-456f-aba4-0ce59ce89a5e"),
                            Code = "LC",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = new Guid("dd7ff212-d859-4d87-93e3-e0088f0a0c7e"),
                            Code = "VC",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = new Guid("114a7b1c-efce-4053-aade-82ed8d5f60be"),
                            Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = new Guid("496779aa-8fcf-4192-9bdd-4bc95d34b7db"),
                            Code = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = new Guid("0925b76b-c1cc-438d-8f8f-d6841ae1d3f0"),
                            Code = "ST",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = new Guid("6e3b65f0-ec50-4c5c-8f4a-841a3e1229d1"),
                            Code = "SA",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = new Guid("8eaa1fa5-adaf-43c6-8453-185610fb3a15"),
                            Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = new Guid("3bbe9151-baa1-4b69-855c-783ecd5525ea"),
                            Code = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = new Guid("fde81b3b-9d08-41f6-8515-4859c551b7bc"),
                            Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = new Guid("11c41f2e-3afb-4565-b500-10538253455c"),
                            Code = "SL",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("8b5887b7-f003-4c39-aad8-83165f3ea13e"),
                            Code = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = new Guid("a125f5af-3b89-4c36-a389-557eff868631"),
                            Code = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = new Guid("599c2dde-dc51-4160-956e-21539a2ad6b8"),
                            Code = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = new Guid("a38124bf-5431-4cd3-b6df-f94afc9c47b6"),
                            Code = "SB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = new Guid("30d39c1f-f1d7-45b6-bd56-61826c0a27f3"),
                            Code = "SO",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = new Guid("f4813003-d79d-4049-8b34-162c307a2152"),
                            Code = "ZA",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = new Guid("0ebfeeb6-0721-4047-a16a-f113e02f0cf1"),
                            Code = "KR",
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = new Guid("849efc01-113c-4f8a-bc52-719d3c9362f5"),
                            Code = "SS",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = new Guid("f36adaac-ee8c-4659-a75a-2b60bcb5a65f"),
                            Code = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = new Guid("22e879c5-23fe-4ee3-bbff-af2e2e025a7a"),
                            Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = new Guid("3dce028c-ee8d-48e4-9421-eb516b42296d"),
                            Code = "SD",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = new Guid("6ad317d9-acaf-4609-9d92-42c9c672b186"),
                            Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = new Guid("9eee9a50-e009-4882-9be8-bcb524f2df0c"),
                            Code = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("18540598-4956-4dab-b2b3-69581333f3c0"),
                            Code = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = new Guid("62a7a4e3-0f1e-4af6-ad17-34d519b0b0f0"),
                            Code = "SY",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = new Guid("b740fddb-bb89-4498-8de9-9c986082f2f0"),
                            Code = "TJ",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = new Guid("5479f3fc-4df9-4e22-88f9-89b298860959"),
                            Code = "TZ",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = new Guid("537c1db8-b38d-49d9-874f-96aeb57d6c50"),
                            Code = "TH",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = new Guid("b18bca68-95f3-4944-874d-d4b37284208a"),
                            Code = "TL",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = new Guid("9a756351-8e09-4391-953e-3576d46cb8c8"),
                            Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = new Guid("5887fd86-3d86-4ea9-ac79-602692c9d251"),
                            Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = new Guid("7da0fda9-9efe-452d-8758-e9032f3fb07a"),
                            Code = "TT",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = new Guid("f560dff2-471a-4e78-8c1e-7635200f0d2f"),
                            Code = "TN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = new Guid("6ee91291-2bf9-46f9-8a48-0952493ce2ee"),
                            Code = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = new Guid("a5f115b6-2e47-4bf1-89f4-e2b337445ff7"),
                            Code = "TM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = new Guid("e52a4fb9-9493-4f86-a5a3-cbd87207aefb"),
                            Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = new Guid("11297a24-8d79-47ef-b07f-900a220f4b3c"),
                            Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = new Guid("9e1d632d-ff36-4935-8e03-cecaafbc6a50"),
                            Code = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("2764b0c3-2817-4afe-8540-2f3b9bc89698"),
                            Code = "AE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = new Guid("192c73f9-35ca-4cf4-8661-c58dad8a0b93"),
                            Code = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("39f792e5-1f06-4042-9605-9cd6025e67bd"),
                            Code = "US",
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = new Guid("2a3a652c-cbb8-4dca-93de-7cadccdb1d7f"),
                            Code = "UY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = new Guid("3b72bf62-b857-4628-8d2e-af4630963b43"),
                            Code = "UZ",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = new Guid("5fb0b710-65c8-4015-b285-7c8844471c8c"),
                            Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = new Guid("24e614b0-d9ab-44dc-805d-5dfbe8bc5c66"),
                            Code = "VA",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = new Guid("9bae68a8-3ddb-44d4-aa13-f6e98139d251"),
                            Code = "VE",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = new Guid("32ae764d-3d18-4e1d-a043-5c1e26fc5e6f"),
                            Code = "VN",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = new Guid("17557e8f-abb5-4252-9303-17aea8d7f9f9"),
                            Code = "YE",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = new Guid("74a89a0f-44ff-467b-a1c6-c9019b1fa3e4"),
                            Code = "ZM",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = new Guid("1cf1c4eb-72e7-4464-bc68-6cd006a7f8ed"),
                            Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("DoctorDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorDetails");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorEducation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("DoctorEmailAddress");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorExperience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorFirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("DoctorImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("DoctorSoftDelete");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DoctorLastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PhoneNumber");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("DoctorSpecialty");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("DoctorTown");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("DoctorId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("DoctorBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("DoctorId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("DoctorInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.HasKey("DoctorId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetGenderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("GenderName");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e0d5a9d-f309-42c0-b28c-7e0894872a76"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("69d8ac97-5f41-45f1-9a4b-5bc8c295f5f5"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("DateOfIntervention");

                    b.Property<string>("DescriptionFromDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<string>("DescriptionFromUSer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DoctorId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("BookingInterventionSoftDeleted");

                    b.Property<bool>("IsInterventionDone")
                        .HasColumnType("bit")
                        .HasComment("InterventionStatus");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("PriceForIntervention");

                    b.Property<Guid>("TypeInspectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeOfInspection");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PetId");

                    b.HasIndex("TypeInspectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetBreed");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("PetDateOfBirth");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("PetAdditionalDetails");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("GenderId");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("PetImage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("PetSoftDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("PetName");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int")
                        .HasComment("PetNumberOfPassport");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetSpecies");

                    b.Property<string>("TransponderCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("PetTransponderAlphanumericCode");

                    b.Property<string>("TransponderLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("PetLocationOfTheTransponder");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Booking");

                    b.HasKey("PetId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("PetBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("InterventionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("InterventionId");

                    b.HasKey("PetId", "InterventionId");

                    b.HasIndex("InterventionId");

                    b.ToTable("PetInterventions");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.TypeIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("TypeInspectionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("TypeInterventionName");

                    b.HasKey("Id");

                    b.ToTable("TypeInspections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("434223c4-92f3-4814-9332-b8ed02cc0333"),
                            Name = "Emergency"
                        },
                        new
                        {
                            Id = new Guid("236031c5-8e8d-4c1a-8325-29935d5e5343"),
                            Name = "Diagnostic Interventions"
                        },
                        new
                        {
                            Id = new Guid("834fce2c-c900-40ba-9401-a65d8a0e8477"),
                            Name = "Surgical Interventions"
                        },
                        new
                        {
                            Id = new Guid("0328baa7-e6b7-44fa-b860-8d1c6e04fa28"),
                            Name = "Therapeutic Interventions"
                        },
                        new
                        {
                            Id = new Guid("54223189-1619-4fe4-97a6-5bd9f6150b42"),
                            Name = "Dental Interventions"
                        },
                        new
                        {
                            Id = new Guid("eed0abdb-4769-4c23-bf3b-8a4c3915a990"),
                            Name = "Obstetric and Reproductive Interventions"
                        },
                        new
                        {
                            Id = new Guid("2e63b0da-2414-457d-9776-6c742c24edef"),
                            Name = "Exotic and Specialized Interventions"
                        },
                        new
                        {
                            Id = new Guid("0bb78d20-b2ea-4f1e-bbee-6d16c59868f1"),
                            Name = "Preventive Interventions"
                        },
                        new
                        {
                            Id = new Guid("4a40036d-f0e8-4660-8ac1-e78a57243587"),
                            Name = "Oncological Interventions"
                        },
                        new
                        {
                            Id = new Guid("fec5534e-5769-4172-a9da-c52e016587e1"),
                            Name = "Postoperative Care"
                        });
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BookingId");

                    b.HasKey("UserDetailsId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("UserBookings");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Address");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("CountryId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("FirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("ImageUrl");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("UserDetailsSoftDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("LastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("PhoneNumber");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Town");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsApplicationUser", b =>
                {
                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserId");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ApplicationUser");

                    b.HasKey("UserDetailsId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserDetailsApplicationUsers");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UserDetailsId");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PetId");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PetId");

                    b.HasIndex("PetId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("UserDetailsPets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Booking", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.ClinicDoctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorInterventions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Intervention");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.DoctorPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorPets")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("DoctorPets")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Intervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.TypeIntervention", "TypeInspection")
                        .WithMany()
                        .HasForeignKey("TypeInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pet");

                    b.Navigation("TypeInspection");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.PetIntervention", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Intervention", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("PetInterventions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intervention");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserBookings", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetails", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsApplicationUser", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.UserDetailsPet", b =>
                {
                    b.HasOne("VetAssistant.Data.Models.Pet", "Pet")
                        .WithMany("UserPets")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetAssistant.Data.Models.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Doctor", b =>
                {
                    b.Navigation("ClinicDoctors");

                    b.Navigation("DoctorInterventions");

                    b.Navigation("DoctorPets");
                });

            modelBuilder.Entity("VetAssistant.Data.Models.Pet", b =>
                {
                    b.Navigation("DoctorPets");

                    b.Navigation("PetInterventions");

                    b.Navigation("UserPets");
                });
#pragma warning restore 612, 618
        }
    }
}
